// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
use parol_runtime::parser::parse_tree_type::TreeConstruct;
#[allow(unused_imports)]
use parol_runtime::parser::{LLKParser, LookaheadDFA, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::grammar::Grammar;
use crate::grammar_trait::GrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[(&str, Option<(bool, &str)>); 34] = &[
    /*  0 */ (UNMATCHABLE_TOKEN, None),
    /*  1 */ (UNMATCHABLE_TOKEN, None),
    /*  2 */ (UNMATCHABLE_TOKEN, None),
    /*  3 */ (UNMATCHABLE_TOKEN, None),
    /*  4 */ (UNMATCHABLE_TOKEN, None),
    /*  5 */
    (
        r"[-+]?(\d+\.\d*|\d*\.\d+)([eE][-+]?\d+)?|[-+]?\d+[eE][-+]?\d+|[-+]?[Ii]nf|[Nn]a[Nn]",
        None,
    ),
    /*  6 */ (r"\d[\d_]*", None),
    /*  7 */ (r"true", None),
    /*  8 */ (r"false", None),
    /*  9 */ (r"null", None),
    /* 10 */ (r"!", None),
    /* 11 */ (r#""([^"]|\\")*""#, None),
    /* 12 */ (r"[^\r\n]*", None),
    /* 13 */ (r"```[a-zA-Z0-9-_]*(\r\n|\r|\n)([^`]|[`]{1,2})*```", None),
    /* 14 */ (r"[a-zA-Z0-9-_]+`([^`\r\n]|\\`)*`", None),
    /* 15 */ (r"`([^`\r\n]|\\`)*`", None),
    /* 16 */ (r"\r\n|\r|\n", None),
    /* 17 */ (r"[\s--\r\n]+", None),
    /* 18 */ (r"@", None),
    /* 19 */ (r"\$\$", None),
    /* 20 */ (r"\$", None),
    /* 21 */ (r"\.", None),
    /* 22 */ (r"\{", None),
    /* 23 */ (r"\}", None),
    /* 24 */ (r"\[", None),
    /* 25 */ (r"\]", None),
    /* 26 */ (r"\(", None),
    /* 27 */ (r"\)", None),
    /* 28 */ (r"=", None),
    /* 29 */ (r",", None),
    /* 30 */ (r"\\\\", None),
    /* 31 */ (r":", None),
    /* 32 */ (r"[\p{XID_Start}_][\p{XID_Continue}-]*", None),
    /* 33 */ (ERROR_TOKEN, None),
];

pub const TERMINAL_NAMES: &[&str; 34] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Float",
    /*  6 */ "Integer",
    /*  7 */ "True",
    /*  8 */ "False",
    /*  9 */ "Null",
    /* 10 */ "Hole",
    /* 11 */ "Str",
    /* 12 */ "Text",
    /* 13 */ "CodeBlock",
    /* 14 */ "NamedCode",
    /* 15 */ "Code",
    /* 16 */ "GrammarNewline",
    /* 17 */ "Ws",
    /* 18 */ "At",
    /* 19 */ "MetaExt",
    /* 20 */ "Ext",
    /* 21 */ "Dot",
    /* 22 */ "Begin",
    /* 23 */ "End",
    /* 24 */ "ArrayBegin",
    /* 25 */ "ArrayEnd",
    /* 26 */ "LParen",
    /* 27 */ "RParen",
    /* 28 */ "Bind",
    /* 29 */ "Comma",
    /* 30 */ "Continue",
    /* 31 */ "TextStart",
    /* 32 */ "Ident",
    /* 33 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 25]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"#.*(\r\n|\r|\n)?",
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Float */
        6,  /* Integer */
        7,  /* True */
        8,  /* False */
        9,  /* Null */
        10, /* Hole */
        11, /* Str */
        13, /* CodeBlock */
        14, /* NamedCode */
        15, /* Code */
        18, /* At */
        19, /* MetaExt */
        20, /* Ext */
        21, /* Dot */
        22, /* Begin */
        23, /* End */
        24, /* ArrayBegin */
        25, /* ArrayEnd */
        26, /* LParen */
        27, /* RParen */
        28, /* Bind */
        29, /* Comma */
        30, /* Continue */
        31, /* TextStart */
        32, /* Ident */
    ],
);

/* SCANNER_1: "Text" */
const SCANNER_1: (&[&str; 5], &[TerminalIndex; 3]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ UNMATCHABLE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        12, /* Text */
        16, /* GrammarNewline */
        17, /* Ws */
    ],
);

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 70] = &[
    /*  0 */ "Array",
    /*  1 */ "ArrayBegin",
    /*  2 */ "ArrayElements",
    /*  3 */ "ArrayElementsOpt",
    /*  4 */ "ArrayElementsTail",
    /*  5 */ "ArrayElementsTailOpt",
    /*  6 */ "ArrayEnd",
    /*  7 */ "ArrayMarker",
    /*  8 */ "ArrayMarkerOpt",
    /*  9 */ "ArrayOpt",
    /* 10 */ "At",
    /* 11 */ "Begin",
    /* 12 */ "Bind",
    /* 13 */ "Binding",
    /* 14 */ "BindingRhs",
    /* 15 */ "Boolean",
    /* 16 */ "Code",
    /* 17 */ "CodeBlock",
    /* 18 */ "Comma",
    /* 19 */ "Continue",
    /* 20 */ "Dot",
    /* 21 */ "End",
    /* 22 */ "Eure",
    /* 23 */ "EureList",
    /* 24 */ "EureList0",
    /* 25 */ "Ext",
    /* 26 */ "ExtensionNameSpace",
    /* 27 */ "False",
    /* 28 */ "Float",
    /* 29 */ "GrammarNewline",
    /* 30 */ "Hole",
    /* 31 */ "Ident",
    /* 32 */ "Integer",
    /* 33 */ "Key",
    /* 34 */ "KeyBase",
    /* 35 */ "KeyOpt",
    /* 36 */ "Keys",
    /* 37 */ "KeysList",
    /* 38 */ "LParen",
    /* 39 */ "MetaExt",
    /* 40 */ "MetaExtKey",
    /* 41 */ "NamedCode",
    /* 42 */ "Null",
    /* 43 */ "Object",
    /* 44 */ "ObjectList",
    /* 45 */ "ObjectOpt",
    /* 46 */ "Path",
    /* 47 */ "RParen",
    /* 48 */ "Section",
    /* 49 */ "SectionBinding",
    /* 50 */ "SectionBody",
    /* 51 */ "SectionBodyList",
    /* 52 */ "Str",
    /* 53 */ "Strings",
    /* 54 */ "StringsList",
    /* 55 */ "Text",
    /* 56 */ "TextBinding",
    /* 57 */ "TextBindingOpt",
    /* 58 */ "TextBindingOpt0",
    /* 59 */ "TextStart",
    /* 60 */ "True",
    /* 61 */ "Tuple",
    /* 62 */ "TupleElements",
    /* 63 */ "TupleElementsOpt",
    /* 64 */ "TupleElementsTail",
    /* 65 */ "TupleElementsTailOpt",
    /* 66 */ "TupleOpt",
    /* 67 */ "Value",
    /* 68 */ "ValueBinding",
    /* 69 */ "Ws",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 70] = &[
    /* 0 - "Array" */
    LookaheadDFA {
        prod0: 60,
        transitions: &[],
        k: 0,
    },
    /* 1 - "ArrayBegin" */
    LookaheadDFA {
        prod0: 103,
        transitions: &[],
        k: 0,
    },
    /* 2 - "ArrayElements" */
    LookaheadDFA {
        prod0: 63,
        transitions: &[],
        k: 0,
    },
    /* 3 - "ArrayElementsOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 25, 2, 65), Trans(0, 29, 1, 64)],
        k: 1,
    },
    /* 4 - "ArrayElementsTail" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 5 - "ArrayElementsTailOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 67),
            Trans(0, 6, 1, 67),
            Trans(0, 7, 1, 67),
            Trans(0, 8, 1, 67),
            Trans(0, 9, 1, 67),
            Trans(0, 10, 1, 67),
            Trans(0, 11, 1, 67),
            Trans(0, 13, 1, 67),
            Trans(0, 14, 1, 67),
            Trans(0, 15, 1, 67),
            Trans(0, 21, 1, 67),
            Trans(0, 22, 1, 67),
            Trans(0, 24, 1, 67),
            Trans(0, 25, 2, 68),
            Trans(0, 26, 1, 67),
        ],
        k: 1,
    },
    /* 6 - "ArrayEnd" */
    LookaheadDFA {
        prod0: 104,
        transitions: &[],
        k: 0,
    },
    /* 7 - "ArrayMarker" */
    LookaheadDFA {
        prod0: 28,
        transitions: &[],
        k: 0,
    },
    /* 8 - "ArrayMarkerOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 6, 1, 29), Trans(0, 25, 2, 30)],
        k: 1,
    },
    /* 9 - "ArrayOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 61),
            Trans(0, 6, 1, 61),
            Trans(0, 7, 1, 61),
            Trans(0, 8, 1, 61),
            Trans(0, 9, 1, 61),
            Trans(0, 10, 1, 61),
            Trans(0, 11, 1, 61),
            Trans(0, 13, 1, 61),
            Trans(0, 14, 1, 61),
            Trans(0, 15, 1, 61),
            Trans(0, 21, 1, 61),
            Trans(0, 22, 1, 61),
            Trans(0, 24, 1, 61),
            Trans(0, 25, 2, 62),
            Trans(0, 26, 1, 61),
        ],
        k: 1,
    },
    /* 10 - "At" */
    LookaheadDFA {
        prod0: 97,
        transitions: &[],
        k: 0,
    },
    /* 11 - "Begin" */
    LookaheadDFA {
        prod0: 101,
        transitions: &[],
        k: 0,
    },
    /* 12 - "Bind" */
    LookaheadDFA {
        prod0: 107,
        transitions: &[],
        k: 0,
    },
    /* 13 - "Binding" */
    LookaheadDFA {
        prod0: 5,
        transitions: &[],
        k: 0,
    },
    /* 14 - "BindingRhs" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 22, 2, 7), Trans(0, 28, 1, 6), Trans(0, 31, 3, 8)],
        k: 1,
    },
    /* 15 - "Boolean" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 80), Trans(0, 8, 2, 81)],
        k: 1,
    },
    /* 16 - "Code" */
    LookaheadDFA {
        prod0: 94,
        transitions: &[],
        k: 0,
    },
    /* 17 - "CodeBlock" */
    LookaheadDFA {
        prod0: 92,
        transitions: &[],
        k: 0,
    },
    /* 18 - "Comma" */
    LookaheadDFA {
        prod0: 108,
        transitions: &[],
        k: 0,
    },
    /* 19 - "Continue" */
    LookaheadDFA {
        prod0: 109,
        transitions: &[],
        k: 0,
    },
    /* 20 - "Dot" */
    LookaheadDFA {
        prod0: 100,
        transitions: &[],
        k: 0,
    },
    /* 21 - "End" */
    LookaheadDFA {
        prod0: 102,
        transitions: &[],
        k: 0,
    },
    /* 22 - "Eure" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 23 - "EureList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 4),
            Trans(0, 6, 1, 3),
            Trans(0, 7, 1, 3),
            Trans(0, 8, 1, 3),
            Trans(0, 9, 1, 3),
            Trans(0, 10, 1, 3),
            Trans(0, 11, 1, 3),
            Trans(0, 18, 2, 4),
            Trans(0, 19, 1, 3),
            Trans(0, 20, 1, 3),
            Trans(0, 23, 2, 4),
            Trans(0, 32, 1, 3),
        ],
        k: 1,
    },
    /* 24 - "EureList0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 2), Trans(0, 18, 1, 1), Trans(0, 23, 2, 2)],
        k: 1,
    },
    /* 25 - "Ext" */
    LookaheadDFA {
        prod0: 99,
        transitions: &[],
        k: 0,
    },
    /* 26 - "ExtensionNameSpace" */
    LookaheadDFA {
        prod0: 40,
        transitions: &[],
        k: 0,
    },
    /* 27 - "False" */
    LookaheadDFA {
        prod0: 83,
        transitions: &[],
        k: 0,
    },
    /* 28 - "Float" */
    LookaheadDFA {
        prod0: 78,
        transitions: &[],
        k: 0,
    },
    /* 29 - "GrammarNewline" */
    LookaheadDFA {
        prod0: 95,
        transitions: &[],
        k: 0,
    },
    /* 30 - "Hole" */
    LookaheadDFA {
        prod0: 85,
        transitions: &[],
        k: 0,
    },
    /* 31 - "Ident" */
    LookaheadDFA {
        prod0: 111,
        transitions: &[],
        k: 0,
    },
    /* 32 - "Integer" */
    LookaheadDFA {
        prod0: 79,
        transitions: &[],
        k: 0,
    },
    /* 33 - "Key" */
    LookaheadDFA {
        prod0: 25,
        transitions: &[],
        k: 0,
    },
    /* 34 - "KeyBase" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 4, 34),
            Trans(0, 7, 7, 37),
            Trans(0, 8, 8, 38),
            Trans(0, 9, 6, 36),
            Trans(0, 10, 9, 39),
            Trans(0, 11, 3, 33),
            Trans(0, 19, 5, 35),
            Trans(0, 20, 2, 32),
            Trans(0, 32, 1, 31),
        ],
        k: 1,
    },
    /* 35 - "KeyOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 27),
            Trans(0, 6, 2, 27),
            Trans(0, 7, 2, 27),
            Trans(0, 8, 2, 27),
            Trans(0, 9, 2, 27),
            Trans(0, 10, 2, 27),
            Trans(0, 11, 2, 27),
            Trans(0, 18, 2, 27),
            Trans(0, 19, 2, 27),
            Trans(0, 20, 2, 27),
            Trans(0, 21, 2, 27),
            Trans(0, 22, 2, 27),
            Trans(0, 23, 2, 27),
            Trans(0, 24, 1, 26),
            Trans(0, 25, 2, 27),
            Trans(0, 27, 2, 27),
            Trans(0, 28, 2, 27),
            Trans(0, 29, 2, 27),
            Trans(0, 31, 2, 27),
            Trans(0, 32, 2, 27),
        ],
        k: 1,
    },
    /* 36 - "Keys" */
    LookaheadDFA {
        prod0: 22,
        transitions: &[],
        k: 0,
    },
    /* 37 - "KeysList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 24),
            Trans(0, 6, 2, 24),
            Trans(0, 7, 2, 24),
            Trans(0, 8, 2, 24),
            Trans(0, 9, 2, 24),
            Trans(0, 10, 2, 24),
            Trans(0, 11, 2, 24),
            Trans(0, 18, 2, 24),
            Trans(0, 19, 2, 24),
            Trans(0, 20, 2, 24),
            Trans(0, 21, 1, 23),
            Trans(0, 22, 2, 24),
            Trans(0, 23, 2, 24),
            Trans(0, 25, 2, 24),
            Trans(0, 27, 2, 24),
            Trans(0, 28, 2, 24),
            Trans(0, 29, 2, 24),
            Trans(0, 31, 2, 24),
            Trans(0, 32, 2, 24),
        ],
        k: 1,
    },
    /* 38 - "LParen" */
    LookaheadDFA {
        prod0: 105,
        transitions: &[],
        k: 0,
    },
    /* 39 - "MetaExt" */
    LookaheadDFA {
        prod0: 98,
        transitions: &[],
        k: 0,
    },
    /* 40 - "MetaExtKey" */
    LookaheadDFA {
        prod0: 41,
        transitions: &[],
        k: 0,
    },
    /* 41 - "NamedCode" */
    LookaheadDFA {
        prod0: 93,
        transitions: &[],
        k: 0,
    },
    /* 42 - "Null" */
    LookaheadDFA {
        prod0: 84,
        transitions: &[],
        k: 0,
    },
    /* 43 - "Object" */
    LookaheadDFA {
        prod0: 55,
        transitions: &[],
        k: 0,
    },
    /* 44 - "ObjectList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 56),
            Trans(0, 7, 1, 56),
            Trans(0, 8, 1, 56),
            Trans(0, 9, 1, 56),
            Trans(0, 10, 1, 56),
            Trans(0, 11, 1, 56),
            Trans(0, 19, 1, 56),
            Trans(0, 20, 1, 56),
            Trans(0, 23, 2, 57),
            Trans(0, 32, 1, 56),
        ],
        k: 1,
    },
    /* 45 - "ObjectOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 59),
            Trans(0, 7, 2, 59),
            Trans(0, 8, 2, 59),
            Trans(0, 9, 2, 59),
            Trans(0, 10, 2, 59),
            Trans(0, 11, 2, 59),
            Trans(0, 19, 2, 59),
            Trans(0, 20, 2, 59),
            Trans(0, 23, 2, 59),
            Trans(0, 29, 1, 58),
            Trans(0, 32, 2, 59),
        ],
        k: 1,
    },
    /* 46 - "Path" */
    LookaheadDFA {
        prod0: 86,
        transitions: &[],
        k: 0,
    },
    /* 47 - "RParen" */
    LookaheadDFA {
        prod0: 106,
        transitions: &[],
        k: 0,
    },
    /* 48 - "Section" */
    LookaheadDFA {
        prod0: 16,
        transitions: &[],
        k: 0,
    },
    /* 49 - "SectionBinding" */
    LookaheadDFA {
        prod0: 10,
        transitions: &[],
        k: 0,
    },
    /* 50 - "SectionBody" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 1, 17),
            Trans(0, 6, 1, 17),
            Trans(0, 7, 1, 17),
            Trans(0, 8, 1, 17),
            Trans(0, 9, 1, 17),
            Trans(0, 10, 1, 17),
            Trans(0, 11, 1, 17),
            Trans(0, 18, 1, 17),
            Trans(0, 19, 1, 17),
            Trans(0, 20, 1, 17),
            Trans(0, 22, 2, 20),
            Trans(0, 23, 1, 17),
            Trans(0, 28, 3, 21),
            Trans(0, 32, 1, 17),
        ],
        k: 1,
    },
    /* 51 - "SectionBodyList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 19),
            Trans(0, 6, 1, 18),
            Trans(0, 7, 1, 18),
            Trans(0, 8, 1, 18),
            Trans(0, 9, 1, 18),
            Trans(0, 10, 1, 18),
            Trans(0, 11, 1, 18),
            Trans(0, 18, 2, 19),
            Trans(0, 19, 1, 18),
            Trans(0, 20, 1, 18),
            Trans(0, 23, 2, 19),
            Trans(0, 32, 1, 18),
        ],
        k: 1,
    },
    /* 52 - "Str" */
    LookaheadDFA {
        prod0: 90,
        transitions: &[],
        k: 0,
    },
    /* 53 - "Strings" */
    LookaheadDFA {
        prod0: 87,
        transitions: &[],
        k: 0,
    },
    /* 54 - "StringsList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 89),
            Trans(0, 6, 2, 89),
            Trans(0, 7, 2, 89),
            Trans(0, 8, 2, 89),
            Trans(0, 9, 2, 89),
            Trans(0, 10, 2, 89),
            Trans(0, 11, 2, 89),
            Trans(0, 18, 2, 89),
            Trans(0, 19, 2, 89),
            Trans(0, 20, 2, 89),
            Trans(0, 23, 2, 89),
            Trans(0, 25, 2, 89),
            Trans(0, 27, 2, 89),
            Trans(0, 29, 2, 89),
            Trans(0, 30, 1, 88),
            Trans(0, 32, 2, 89),
        ],
        k: 1,
    },
    /* 55 - "Text" */
    LookaheadDFA {
        prod0: 91,
        transitions: &[],
        k: 0,
    },
    /* 56 - "TextBinding" */
    LookaheadDFA {
        prod0: 11,
        transitions: &[],
        k: 0,
    },
    /* 57 - "TextBindingOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 12, 2, 15), Trans(0, 17, 1, 14)],
        k: 1,
    },
    /* 58 - "TextBindingOpt0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 13),
            Trans(0, 6, 2, 13),
            Trans(0, 7, 2, 13),
            Trans(0, 8, 2, 13),
            Trans(0, 9, 2, 13),
            Trans(0, 10, 2, 13),
            Trans(0, 11, 2, 13),
            Trans(0, 16, 1, 12),
            Trans(0, 18, 2, 13),
            Trans(0, 19, 2, 13),
            Trans(0, 20, 2, 13),
            Trans(0, 23, 2, 13),
            Trans(0, 32, 2, 13),
        ],
        k: 1,
    },
    /* 59 - "TextStart" */
    LookaheadDFA {
        prod0: 110,
        transitions: &[],
        k: 0,
    },
    /* 60 - "True" */
    LookaheadDFA {
        prod0: 82,
        transitions: &[],
        k: 0,
    },
    /* 61 - "Tuple" */
    LookaheadDFA {
        prod0: 69,
        transitions: &[],
        k: 0,
    },
    /* 62 - "TupleElements" */
    LookaheadDFA {
        prod0: 72,
        transitions: &[],
        k: 0,
    },
    /* 63 - "TupleElementsOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 27, 2, 74), Trans(0, 29, 1, 73)],
        k: 1,
    },
    /* 64 - "TupleElementsTail" */
    LookaheadDFA {
        prod0: 75,
        transitions: &[],
        k: 0,
    },
    /* 65 - "TupleElementsTailOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 76),
            Trans(0, 6, 1, 76),
            Trans(0, 7, 1, 76),
            Trans(0, 8, 1, 76),
            Trans(0, 9, 1, 76),
            Trans(0, 10, 1, 76),
            Trans(0, 11, 1, 76),
            Trans(0, 13, 1, 76),
            Trans(0, 14, 1, 76),
            Trans(0, 15, 1, 76),
            Trans(0, 21, 1, 76),
            Trans(0, 22, 1, 76),
            Trans(0, 24, 1, 76),
            Trans(0, 26, 1, 76),
            Trans(0, 27, 2, 77),
        ],
        k: 1,
    },
    /* 66 - "TupleOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 70),
            Trans(0, 6, 1, 70),
            Trans(0, 7, 1, 70),
            Trans(0, 8, 1, 70),
            Trans(0, 9, 1, 70),
            Trans(0, 10, 1, 70),
            Trans(0, 11, 1, 70),
            Trans(0, 13, 1, 70),
            Trans(0, 14, 1, 70),
            Trans(0, 15, 1, 70),
            Trans(0, 21, 1, 70),
            Trans(0, 22, 1, 70),
            Trans(0, 24, 1, 70),
            Trans(0, 26, 1, 70),
            Trans(0, 27, 2, 71),
        ],
        k: 1,
    },
    /* 67 - "Value" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 4, 45),
            Trans(0, 6, 5, 46),
            Trans(0, 7, 6, 47),
            Trans(0, 8, 6, 47),
            Trans(0, 9, 7, 48),
            Trans(0, 10, 9, 50),
            Trans(0, 11, 8, 49),
            Trans(0, 13, 10, 51),
            Trans(0, 14, 11, 52),
            Trans(0, 15, 12, 53),
            Trans(0, 21, 13, 54),
            Trans(0, 22, 1, 42),
            Trans(0, 24, 2, 43),
            Trans(0, 26, 3, 44),
        ],
        k: 1,
    },
    /* 68 - "ValueBinding" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
    /* 69 - "Ws" */
    LookaheadDFA {
        prod0: 96,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 112] = &[
    // 0 - Eure: EureList /* Vec */ EureList0 /* Vec */;
    Production {
        lhs: 22,
        production: &[ParseType::N(24), ParseType::N(23)],
    },
    // 1 - EureList0: Section EureList0;
    Production {
        lhs: 24,
        production: &[ParseType::N(24), ParseType::N(48)],
    },
    // 2 - EureList0: ;
    Production {
        lhs: 24,
        production: &[],
    },
    // 3 - EureList: Binding EureList;
    Production {
        lhs: 23,
        production: &[ParseType::N(23), ParseType::N(13)],
    },
    // 4 - EureList: ;
    Production {
        lhs: 23,
        production: &[],
    },
    // 5 - Binding: Keys BindingRhs;
    Production {
        lhs: 13,
        production: &[ParseType::N(14), ParseType::N(36)],
    },
    // 6 - BindingRhs: ValueBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(68)],
    },
    // 7 - BindingRhs: SectionBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(49)],
    },
    // 8 - BindingRhs: TextBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(56)],
    },
    // 9 - ValueBinding: Bind Value;
    Production {
        lhs: 68,
        production: &[ParseType::N(67), ParseType::N(12)],
    },
    // 10 - SectionBinding: Begin Eure End;
    Production {
        lhs: 49,
        production: &[ParseType::N(21), ParseType::N(22), ParseType::N(11)],
    },
    // 11 - TextBinding: TextStart TextBindingOpt /* Option */ Text TextBindingOpt0 /* Option */;
    Production {
        lhs: 56,
        production: &[
            ParseType::N(58),
            ParseType::N(55),
            ParseType::N(57),
            ParseType::N(59),
        ],
    },
    // 12 - TextBindingOpt0: GrammarNewline;
    Production {
        lhs: 58,
        production: &[ParseType::N(29)],
    },
    // 13 - TextBindingOpt0: ;
    Production {
        lhs: 58,
        production: &[],
    },
    // 14 - TextBindingOpt: Ws^ /* Clipped */;
    Production {
        lhs: 57,
        production: &[ParseType::N(69)],
    },
    // 15 - TextBindingOpt: ;
    Production {
        lhs: 57,
        production: &[],
    },
    // 16 - Section: At Keys SectionBody;
    Production {
        lhs: 48,
        production: &[ParseType::N(50), ParseType::N(36), ParseType::N(10)],
    },
    // 17 - SectionBody: SectionBodyList /* Vec */;
    Production {
        lhs: 50,
        production: &[ParseType::N(51)],
    },
    // 18 - SectionBodyList: Binding SectionBodyList;
    Production {
        lhs: 51,
        production: &[ParseType::N(51), ParseType::N(13)],
    },
    // 19 - SectionBodyList: ;
    Production {
        lhs: 51,
        production: &[],
    },
    // 20 - SectionBody: SectionBinding;
    Production {
        lhs: 50,
        production: &[ParseType::N(49)],
    },
    // 21 - SectionBody: Bind Value;
    Production {
        lhs: 50,
        production: &[ParseType::N(67), ParseType::N(12)],
    },
    // 22 - Keys: Key KeysList /* Vec */;
    Production {
        lhs: 36,
        production: &[ParseType::N(37), ParseType::N(33)],
    },
    // 23 - KeysList: Dot Key KeysList;
    Production {
        lhs: 37,
        production: &[ParseType::N(37), ParseType::N(33), ParseType::N(20)],
    },
    // 24 - KeysList: ;
    Production {
        lhs: 37,
        production: &[],
    },
    // 25 - Key: KeyBase KeyOpt /* Option */;
    Production {
        lhs: 33,
        production: &[ParseType::N(35), ParseType::N(34)],
    },
    // 26 - KeyOpt: ArrayMarker;
    Production {
        lhs: 35,
        production: &[ParseType::N(7)],
    },
    // 27 - KeyOpt: ;
    Production {
        lhs: 35,
        production: &[],
    },
    // 28 - ArrayMarker: ArrayBegin ArrayMarkerOpt /* Option */ ArrayEnd;
    Production {
        lhs: 7,
        production: &[ParseType::N(6), ParseType::N(8), ParseType::N(1)],
    },
    // 29 - ArrayMarkerOpt: Integer;
    Production {
        lhs: 8,
        production: &[ParseType::N(32)],
    },
    // 30 - ArrayMarkerOpt: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 31 - KeyBase: Ident;
    Production {
        lhs: 34,
        production: &[ParseType::N(31)],
    },
    // 32 - KeyBase: ExtensionNameSpace;
    Production {
        lhs: 34,
        production: &[ParseType::N(26)],
    },
    // 33 - KeyBase: Str;
    Production {
        lhs: 34,
        production: &[ParseType::N(52)],
    },
    // 34 - KeyBase: Integer;
    Production {
        lhs: 34,
        production: &[ParseType::N(32)],
    },
    // 35 - KeyBase: MetaExtKey;
    Production {
        lhs: 34,
        production: &[ParseType::N(40)],
    },
    // 36 - KeyBase: Null;
    Production {
        lhs: 34,
        production: &[ParseType::N(42)],
    },
    // 37 - KeyBase: True;
    Production {
        lhs: 34,
        production: &[ParseType::N(60)],
    },
    // 38 - KeyBase: False;
    Production {
        lhs: 34,
        production: &[ParseType::N(27)],
    },
    // 39 - KeyBase: Hole;
    Production {
        lhs: 34,
        production: &[ParseType::N(30)],
    },
    // 40 - ExtensionNameSpace: Ext Ident;
    Production {
        lhs: 26,
        production: &[ParseType::N(31), ParseType::N(25)],
    },
    // 41 - MetaExtKey: MetaExt Ident;
    Production {
        lhs: 40,
        production: &[ParseType::N(31), ParseType::N(39)],
    },
    // 42 - Value: Object;
    Production {
        lhs: 67,
        production: &[ParseType::N(43)],
    },
    // 43 - Value: Array;
    Production {
        lhs: 67,
        production: &[ParseType::N(0)],
    },
    // 44 - Value: Tuple;
    Production {
        lhs: 67,
        production: &[ParseType::N(61)],
    },
    // 45 - Value: Float;
    Production {
        lhs: 67,
        production: &[ParseType::N(28)],
    },
    // 46 - Value: Integer;
    Production {
        lhs: 67,
        production: &[ParseType::N(32)],
    },
    // 47 - Value: Boolean;
    Production {
        lhs: 67,
        production: &[ParseType::N(15)],
    },
    // 48 - Value: Null;
    Production {
        lhs: 67,
        production: &[ParseType::N(42)],
    },
    // 49 - Value: Strings;
    Production {
        lhs: 67,
        production: &[ParseType::N(53)],
    },
    // 50 - Value: Hole;
    Production {
        lhs: 67,
        production: &[ParseType::N(30)],
    },
    // 51 - Value: CodeBlock;
    Production {
        lhs: 67,
        production: &[ParseType::N(17)],
    },
    // 52 - Value: NamedCode;
    Production {
        lhs: 67,
        production: &[ParseType::N(41)],
    },
    // 53 - Value: Code;
    Production {
        lhs: 67,
        production: &[ParseType::N(16)],
    },
    // 54 - Value: Path;
    Production {
        lhs: 67,
        production: &[ParseType::N(46)],
    },
    // 55 - Object: Begin ObjectList /* Vec */ End;
    Production {
        lhs: 43,
        production: &[ParseType::N(21), ParseType::N(44), ParseType::N(11)],
    },
    // 56 - ObjectList: Key Bind Value ObjectOpt /* Option */ ObjectList;
    Production {
        lhs: 44,
        production: &[
            ParseType::N(44),
            ParseType::N(45),
            ParseType::N(67),
            ParseType::N(12),
            ParseType::N(33),
        ],
    },
    // 57 - ObjectList: ;
    Production {
        lhs: 44,
        production: &[],
    },
    // 58 - ObjectOpt: Comma;
    Production {
        lhs: 45,
        production: &[ParseType::N(18)],
    },
    // 59 - ObjectOpt: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 60 - Array: ArrayBegin ArrayOpt /* Option */ ArrayEnd;
    Production {
        lhs: 0,
        production: &[ParseType::N(6), ParseType::N(9), ParseType::N(1)],
    },
    // 61 - ArrayOpt: ArrayElements;
    Production {
        lhs: 9,
        production: &[ParseType::N(2)],
    },
    // 62 - ArrayOpt: ;
    Production {
        lhs: 9,
        production: &[],
    },
    // 63 - ArrayElements: Value ArrayElementsOpt /* Option */;
    Production {
        lhs: 2,
        production: &[ParseType::N(3), ParseType::N(67)],
    },
    // 64 - ArrayElementsOpt: ArrayElementsTail;
    Production {
        lhs: 3,
        production: &[ParseType::N(4)],
    },
    // 65 - ArrayElementsOpt: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 66 - ArrayElementsTail: Comma ArrayElementsTailOpt /* Option */;
    Production {
        lhs: 4,
        production: &[ParseType::N(5), ParseType::N(18)],
    },
    // 67 - ArrayElementsTailOpt: ArrayElements;
    Production {
        lhs: 5,
        production: &[ParseType::N(2)],
    },
    // 68 - ArrayElementsTailOpt: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 69 - Tuple: LParen TupleOpt /* Option */ RParen;
    Production {
        lhs: 61,
        production: &[ParseType::N(47), ParseType::N(66), ParseType::N(38)],
    },
    // 70 - TupleOpt: TupleElements;
    Production {
        lhs: 66,
        production: &[ParseType::N(62)],
    },
    // 71 - TupleOpt: ;
    Production {
        lhs: 66,
        production: &[],
    },
    // 72 - TupleElements: Value TupleElementsOpt /* Option */;
    Production {
        lhs: 62,
        production: &[ParseType::N(63), ParseType::N(67)],
    },
    // 73 - TupleElementsOpt: TupleElementsTail;
    Production {
        lhs: 63,
        production: &[ParseType::N(64)],
    },
    // 74 - TupleElementsOpt: ;
    Production {
        lhs: 63,
        production: &[],
    },
    // 75 - TupleElementsTail: Comma TupleElementsTailOpt /* Option */;
    Production {
        lhs: 64,
        production: &[ParseType::N(65), ParseType::N(18)],
    },
    // 76 - TupleElementsTailOpt: TupleElements;
    Production {
        lhs: 65,
        production: &[ParseType::N(62)],
    },
    // 77 - TupleElementsTailOpt: ;
    Production {
        lhs: 65,
        production: &[],
    },
    // 78 - Float: /[-+]?(\d+\.\d*|\d*\.\d+)([eE][-+]?\d+)?|[-+]?\d+[eE][-+]?\d+|[-+]?[Ii]nf|[Nn]a[Nn]/;
    Production {
        lhs: 28,
        production: &[ParseType::T(5)],
    },
    // 79 - Integer: /\d[\d_]*/;
    Production {
        lhs: 32,
        production: &[ParseType::T(6)],
    },
    // 80 - Boolean: True;
    Production {
        lhs: 15,
        production: &[ParseType::N(60)],
    },
    // 81 - Boolean: False;
    Production {
        lhs: 15,
        production: &[ParseType::N(27)],
    },
    // 82 - True: 'true';
    Production {
        lhs: 60,
        production: &[ParseType::T(7)],
    },
    // 83 - False: 'false';
    Production {
        lhs: 27,
        production: &[ParseType::T(8)],
    },
    // 84 - Null: 'null';
    Production {
        lhs: 42,
        production: &[ParseType::T(9)],
    },
    // 85 - Hole: '!';
    Production {
        lhs: 30,
        production: &[ParseType::T(10)],
    },
    // 86 - Path: Dot Keys;
    Production {
        lhs: 46,
        production: &[ParseType::N(36), ParseType::N(20)],
    },
    // 87 - Strings: Str StringsList /* Vec */;
    Production {
        lhs: 53,
        production: &[ParseType::N(54), ParseType::N(52)],
    },
    // 88 - StringsList: Continue Str StringsList;
    Production {
        lhs: 54,
        production: &[ParseType::N(54), ParseType::N(52), ParseType::N(19)],
    },
    // 89 - StringsList: ;
    Production {
        lhs: 54,
        production: &[],
    },
    // 90 - Str: /"([^"]|\\")*"/;
    Production {
        lhs: 52,
        production: &[ParseType::T(11)],
    },
    // 91 - Text: /[^\r\n]*/;
    Production {
        lhs: 55,
        production: &[ParseType::T(12)],
    },
    // 92 - CodeBlock: /```[a-zA-Z0-9-_]*(\r\n|\r|\n)([^`]|[`]{1,2})*```/;
    Production {
        lhs: 17,
        production: &[ParseType::T(13)],
    },
    // 93 - NamedCode: /[a-zA-Z0-9-_]+`([^`\r\n]|\\`)*`/;
    Production {
        lhs: 41,
        production: &[ParseType::T(14)],
    },
    // 94 - Code: /`([^`\r\n]|\\`)*`/;
    Production {
        lhs: 16,
        production: &[ParseType::T(15)],
    },
    // 95 - GrammarNewline: /\r\n|\r|\n/;
    Production {
        lhs: 29,
        production: &[ParseType::T(16)],
    },
    // 96 - Ws: /[\s--\r\n]+/;
    Production {
        lhs: 69,
        production: &[ParseType::T(17)],
    },
    // 97 - At: '@';
    Production {
        lhs: 10,
        production: &[ParseType::T(18)],
    },
    // 98 - MetaExt: '$$';
    Production {
        lhs: 39,
        production: &[ParseType::T(19)],
    },
    // 99 - Ext: '$';
    Production {
        lhs: 25,
        production: &[ParseType::T(20)],
    },
    // 100 - Dot: '.';
    Production {
        lhs: 20,
        production: &[ParseType::T(21)],
    },
    // 101 - Begin: '{';
    Production {
        lhs: 11,
        production: &[ParseType::T(22)],
    },
    // 102 - End: '}';
    Production {
        lhs: 21,
        production: &[ParseType::T(23)],
    },
    // 103 - ArrayBegin: '[';
    Production {
        lhs: 1,
        production: &[ParseType::T(24)],
    },
    // 104 - ArrayEnd: ']';
    Production {
        lhs: 6,
        production: &[ParseType::T(25)],
    },
    // 105 - LParen: '(';
    Production {
        lhs: 38,
        production: &[ParseType::T(26)],
    },
    // 106 - RParen: ')';
    Production {
        lhs: 47,
        production: &[ParseType::T(27)],
    },
    // 107 - Bind: '=';
    Production {
        lhs: 12,
        production: &[ParseType::T(28)],
    },
    // 108 - Comma: ',';
    Production {
        lhs: 18,
        production: &[ParseType::T(29)],
    },
    // 109 - Continue: '\\';
    Production {
        lhs: 19,
        production: &[ParseType::T(30)],
    },
    // 110 - TextStart: ":";
    Production {
        lhs: 59,
        production: &[ParseType::T(31)],
    },
    // 111 - Ident: /[\p{XID_Start}_][\p{XID_Continue}-]*/;
    Production {
        lhs: 31,
        production: &[ParseType::T(32)],
    },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![
        ScannerConfig::new(
            "INITIAL",
            Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
            &[(31 /* TextStart */, 1 /* Text */)],
        ),
        ScannerConfig::new(
            "Text",
            Tokenizer::build(TERMINALS, SCANNER_1.0, SCANNER_1.1).unwrap(),
            &[(12 /* Text */, 0 /* INITIAL */)],
        ),
    ]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut Grammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::parser::parse_tree_type::SynTree;
    use parol_runtime::parser::parser_types::SynTreeFlavor;
    use parol_runtime::syntree::Builder;
    let mut builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, &mut builder, file_name, user_actions)?;
    Ok(builder.build()?)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: &mut T,
    file_name: impl AsRef<Path>,
    user_actions: &mut Grammar<'t>,
) -> Result<(), ParolError>
where
    ParolError: From<T::Error>,
{
    let mut llk_parser = LLKParser::new(
        22,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    // Initialize wrapper
    let mut user_actions = GrammarAuto::new(user_actions);
    llk_parser.parse_into::<T>(
        tree_builder,
        TokenStream::new(input, file_name, &SCANNERS, MAX_K).unwrap(),
        &mut user_actions,
    )
}
