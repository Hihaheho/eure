// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::{
    ParolError, ParseTree, TokenStream,
    parser::{
        LLKParser, LookaheadDFA, ParseType, Production, Trans, parse_tree_type::TreeConstruct,
    },
};
use scnr2::scanner;
use std::path::Path;

use crate::grammar::Grammar;
use crate::grammar_trait::GrammarAuto;

pub const TERMINAL_NAMES: &[&str; 34] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Float",
    /*  6 */ "Integer",
    /*  7 */ "True",
    /*  8 */ "False",
    /*  9 */ "Null",
    /* 10 */ "Hole",
    /* 11 */ "Str",
    /* 12 */ "Text",
    /* 13 */ "CodeBlock",
    /* 14 */ "NamedCode",
    /* 15 */ "Code",
    /* 16 */ "GrammarNewline",
    /* 17 */ "Ws",
    /* 18 */ "At",
    /* 19 */ "MetaExt",
    /* 20 */ "Ext",
    /* 21 */ "Dot",
    /* 22 */ "Begin",
    /* 23 */ "End",
    /* 24 */ "ArrayBegin",
    /* 25 */ "ArrayEnd",
    /* 26 */ "LParen",
    /* 27 */ "RParen",
    /* 28 */ "Bind",
    /* 29 */ "Comma",
    /* 30 */ "Continue",
    /* 31 */ "TextStart",
    /* 32 */ "Ident",
    /* 33 */ "Error",
];

scanner! {
    GrammarScanner {
        mode INITIAL {
            token r"\r\n|\r|\n" => 1; // "Newline"
            token r"[\s--\r\n]+" => 2; // "Whitespace"
            token r"#.*(\r\n|\r|\n)?" => 3; // "LineComment"
            token r"[-+]?(\d+\.\d*|\d*\.\d+)([eE][-+]?\d+)?|[-+]?\d+[eE][-+]?\d+|[-+]?[Ii]nf|[Nn]a[Nn]" => 5; // "Float"
            token r"\d[\d_]*" => 6; // "Integer"
            token r"true" => 7; // "True"
            token r"false" => 8; // "False"
            token r"null" => 9; // "Null"
            token r"!" => 10; // "Hole"
            token r#""([^"]|\\")*""# => 11; // "Str"
            token r"```[a-zA-Z0-9-_]*(\r\n|\r|\n)([^`]|[`]{1,2})*```" => 13; // "CodeBlock"
            token r"[a-zA-Z0-9-_]+`([^`\r\n]|\\`)*`" => 14; // "NamedCode"
            token r"`([^`\r\n]|\\`)*`" => 15; // "Code"
            token r"@" => 18; // "At"
            token r"\$\$" => 19; // "MetaExt"
            token r"\$" => 20; // "Ext"
            token r"\." => 21; // "Dot"
            token r"\{" => 22; // "Begin"
            token r"\}" => 23; // "End"
            token r"\[" => 24; // "ArrayBegin"
            token r"\]" => 25; // "ArrayEnd"
            token r"\(" => 26; // "LParen"
            token r"\)" => 27; // "RParen"
            token r"=" => 28; // "Bind"
            token r"," => 29; // "Comma"
            token r"\\\\" => 30; // "Continue"
            token r":" => 31; // "TextStart"
            token r"[\p{XID_Start}_][\p{XID_Continue}-]*" => 32; // "Ident"
            token r"." => 33; // "Error"
            on 31 enter Text;
        }
        mode Text {
            token r"[^\r\n]*" => 12; // "Text"
            token r"\r\n|\r|\n" => 16; // "GrammarNewline"
            token r"[\s--\r\n]+" => 17; // "Ws"
            token r"." => 33; // "Error"
            on 12 enter INITIAL;
        }
    }
}

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 71] = &[
    /*  0 */ "Array",
    /*  1 */ "ArrayBegin",
    /*  2 */ "ArrayElements",
    /*  3 */ "ArrayElementsOpt",
    /*  4 */ "ArrayElementsTail",
    /*  5 */ "ArrayElementsTailOpt",
    /*  6 */ "ArrayEnd",
    /*  7 */ "ArrayMarker",
    /*  8 */ "ArrayMarkerOpt",
    /*  9 */ "ArrayOpt",
    /* 10 */ "At",
    /* 11 */ "Begin",
    /* 12 */ "Bind",
    /* 13 */ "Binding",
    /* 14 */ "BindingRhs",
    /* 15 */ "Boolean",
    /* 16 */ "Code",
    /* 17 */ "CodeBlock",
    /* 18 */ "Comma",
    /* 19 */ "Continue",
    /* 20 */ "DirectBind",
    /* 21 */ "Dot",
    /* 22 */ "End",
    /* 23 */ "Eure",
    /* 24 */ "EureList",
    /* 25 */ "EureList0",
    /* 26 */ "Ext",
    /* 27 */ "ExtensionNameSpace",
    /* 28 */ "False",
    /* 29 */ "Float",
    /* 30 */ "GrammarNewline",
    /* 31 */ "Hole",
    /* 32 */ "Ident",
    /* 33 */ "Integer",
    /* 34 */ "Key",
    /* 35 */ "KeyBase",
    /* 36 */ "KeyOpt",
    /* 37 */ "Keys",
    /* 38 */ "KeysList",
    /* 39 */ "LParen",
    /* 40 */ "MetaExt",
    /* 41 */ "MetaExtKey",
    /* 42 */ "NamedCode",
    /* 43 */ "Null",
    /* 44 */ "Object",
    /* 45 */ "ObjectList",
    /* 46 */ "ObjectOpt",
    /* 47 */ "Path",
    /* 48 */ "RParen",
    /* 49 */ "Section",
    /* 50 */ "SectionBinding",
    /* 51 */ "SectionBody",
    /* 52 */ "SectionBodyList",
    /* 53 */ "Str",
    /* 54 */ "Strings",
    /* 55 */ "StringsList",
    /* 56 */ "Text",
    /* 57 */ "TextBinding",
    /* 58 */ "TextBindingOpt",
    /* 59 */ "TextBindingOpt0",
    /* 60 */ "TextStart",
    /* 61 */ "True",
    /* 62 */ "Tuple",
    /* 63 */ "TupleElements",
    /* 64 */ "TupleElementsOpt",
    /* 65 */ "TupleElementsTail",
    /* 66 */ "TupleElementsTailOpt",
    /* 67 */ "TupleOpt",
    /* 68 */ "Value",
    /* 69 */ "ValueBinding",
    /* 70 */ "Ws",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 71] = &[
    /* 0 - "Array" */
    LookaheadDFA {
        prod0: 61,
        transitions: &[],
        k: 0,
    },
    /* 1 - "ArrayBegin" */
    LookaheadDFA {
        prod0: 104,
        transitions: &[],
        k: 0,
    },
    /* 2 - "ArrayElements" */
    LookaheadDFA {
        prod0: 64,
        transitions: &[],
        k: 0,
    },
    /* 3 - "ArrayElementsOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 25, 2, 66), Trans(0, 29, 1, 65)],
        k: 1,
    },
    /* 4 - "ArrayElementsTail" */
    LookaheadDFA {
        prod0: 67,
        transitions: &[],
        k: 0,
    },
    /* 5 - "ArrayElementsTailOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 68),
            Trans(0, 6, 1, 68),
            Trans(0, 7, 1, 68),
            Trans(0, 8, 1, 68),
            Trans(0, 9, 1, 68),
            Trans(0, 10, 1, 68),
            Trans(0, 11, 1, 68),
            Trans(0, 13, 1, 68),
            Trans(0, 14, 1, 68),
            Trans(0, 15, 1, 68),
            Trans(0, 21, 1, 68),
            Trans(0, 22, 1, 68),
            Trans(0, 24, 1, 68),
            Trans(0, 25, 2, 69),
            Trans(0, 26, 1, 68),
        ],
        k: 1,
    },
    /* 6 - "ArrayEnd" */
    LookaheadDFA {
        prod0: 105,
        transitions: &[],
        k: 0,
    },
    /* 7 - "ArrayMarker" */
    LookaheadDFA {
        prod0: 29,
        transitions: &[],
        k: 0,
    },
    /* 8 - "ArrayMarkerOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 6, 1, 30), Trans(0, 25, 2, 31)],
        k: 1,
    },
    /* 9 - "ArrayOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 62),
            Trans(0, 6, 1, 62),
            Trans(0, 7, 1, 62),
            Trans(0, 8, 1, 62),
            Trans(0, 9, 1, 62),
            Trans(0, 10, 1, 62),
            Trans(0, 11, 1, 62),
            Trans(0, 13, 1, 62),
            Trans(0, 14, 1, 62),
            Trans(0, 15, 1, 62),
            Trans(0, 21, 1, 62),
            Trans(0, 22, 1, 62),
            Trans(0, 24, 1, 62),
            Trans(0, 25, 2, 63),
            Trans(0, 26, 1, 62),
        ],
        k: 1,
    },
    /* 10 - "At" */
    LookaheadDFA {
        prod0: 98,
        transitions: &[],
        k: 0,
    },
    /* 11 - "Begin" */
    LookaheadDFA {
        prod0: 102,
        transitions: &[],
        k: 0,
    },
    /* 12 - "Bind" */
    LookaheadDFA {
        prod0: 108,
        transitions: &[],
        k: 0,
    },
    /* 13 - "Binding" */
    LookaheadDFA {
        prod0: 5,
        transitions: &[],
        k: 0,
    },
    /* 14 - "BindingRhs" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 22, 2, 7), Trans(0, 28, 1, 6), Trans(0, 31, 3, 8)],
        k: 1,
    },
    /* 15 - "Boolean" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 81), Trans(0, 8, 2, 82)],
        k: 1,
    },
    /* 16 - "Code" */
    LookaheadDFA {
        prod0: 95,
        transitions: &[],
        k: 0,
    },
    /* 17 - "CodeBlock" */
    LookaheadDFA {
        prod0: 93,
        transitions: &[],
        k: 0,
    },
    /* 18 - "Comma" */
    LookaheadDFA {
        prod0: 109,
        transitions: &[],
        k: 0,
    },
    /* 19 - "Continue" */
    LookaheadDFA {
        prod0: 110,
        transitions: &[],
        k: 0,
    },
    /* 20 - "DirectBind" */
    LookaheadDFA {
        prod0: 22,
        transitions: &[],
        k: 0,
    },
    /* 21 - "Dot" */
    LookaheadDFA {
        prod0: 101,
        transitions: &[],
        k: 0,
    },
    /* 22 - "End" */
    LookaheadDFA {
        prod0: 103,
        transitions: &[],
        k: 0,
    },
    /* 23 - "Eure" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 24 - "EureList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 4),
            Trans(0, 6, 1, 3),
            Trans(0, 7, 1, 3),
            Trans(0, 8, 1, 3),
            Trans(0, 9, 1, 3),
            Trans(0, 10, 1, 3),
            Trans(0, 11, 1, 3),
            Trans(0, 18, 2, 4),
            Trans(0, 19, 1, 3),
            Trans(0, 20, 1, 3),
            Trans(0, 23, 2, 4),
            Trans(0, 32, 1, 3),
        ],
        k: 1,
    },
    /* 25 - "EureList0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 2), Trans(0, 18, 1, 1), Trans(0, 23, 2, 2)],
        k: 1,
    },
    /* 26 - "Ext" */
    LookaheadDFA {
        prod0: 100,
        transitions: &[],
        k: 0,
    },
    /* 27 - "ExtensionNameSpace" */
    LookaheadDFA {
        prod0: 41,
        transitions: &[],
        k: 0,
    },
    /* 28 - "False" */
    LookaheadDFA {
        prod0: 84,
        transitions: &[],
        k: 0,
    },
    /* 29 - "Float" */
    LookaheadDFA {
        prod0: 79,
        transitions: &[],
        k: 0,
    },
    /* 30 - "GrammarNewline" */
    LookaheadDFA {
        prod0: 96,
        transitions: &[],
        k: 0,
    },
    /* 31 - "Hole" */
    LookaheadDFA {
        prod0: 86,
        transitions: &[],
        k: 0,
    },
    /* 32 - "Ident" */
    LookaheadDFA {
        prod0: 112,
        transitions: &[],
        k: 0,
    },
    /* 33 - "Integer" */
    LookaheadDFA {
        prod0: 80,
        transitions: &[],
        k: 0,
    },
    /* 34 - "Key" */
    LookaheadDFA {
        prod0: 26,
        transitions: &[],
        k: 0,
    },
    /* 35 - "KeyBase" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 4, 35),
            Trans(0, 7, 7, 38),
            Trans(0, 8, 8, 39),
            Trans(0, 9, 6, 37),
            Trans(0, 10, 9, 40),
            Trans(0, 11, 3, 34),
            Trans(0, 19, 5, 36),
            Trans(0, 20, 2, 33),
            Trans(0, 32, 1, 32),
        ],
        k: 1,
    },
    /* 36 - "KeyOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 28),
            Trans(0, 6, 2, 28),
            Trans(0, 7, 2, 28),
            Trans(0, 8, 2, 28),
            Trans(0, 9, 2, 28),
            Trans(0, 10, 2, 28),
            Trans(0, 11, 2, 28),
            Trans(0, 18, 2, 28),
            Trans(0, 19, 2, 28),
            Trans(0, 20, 2, 28),
            Trans(0, 21, 2, 28),
            Trans(0, 22, 2, 28),
            Trans(0, 23, 2, 28),
            Trans(0, 24, 1, 27),
            Trans(0, 25, 2, 28),
            Trans(0, 27, 2, 28),
            Trans(0, 28, 2, 28),
            Trans(0, 29, 2, 28),
            Trans(0, 31, 2, 28),
            Trans(0, 32, 2, 28),
        ],
        k: 1,
    },
    /* 37 - "Keys" */
    LookaheadDFA {
        prod0: 23,
        transitions: &[],
        k: 0,
    },
    /* 38 - "KeysList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 25),
            Trans(0, 6, 2, 25),
            Trans(0, 7, 2, 25),
            Trans(0, 8, 2, 25),
            Trans(0, 9, 2, 25),
            Trans(0, 10, 2, 25),
            Trans(0, 11, 2, 25),
            Trans(0, 18, 2, 25),
            Trans(0, 19, 2, 25),
            Trans(0, 20, 2, 25),
            Trans(0, 21, 1, 24),
            Trans(0, 22, 2, 25),
            Trans(0, 23, 2, 25),
            Trans(0, 25, 2, 25),
            Trans(0, 27, 2, 25),
            Trans(0, 28, 2, 25),
            Trans(0, 29, 2, 25),
            Trans(0, 31, 2, 25),
            Trans(0, 32, 2, 25),
        ],
        k: 1,
    },
    /* 39 - "LParen" */
    LookaheadDFA {
        prod0: 106,
        transitions: &[],
        k: 0,
    },
    /* 40 - "MetaExt" */
    LookaheadDFA {
        prod0: 99,
        transitions: &[],
        k: 0,
    },
    /* 41 - "MetaExtKey" */
    LookaheadDFA {
        prod0: 42,
        transitions: &[],
        k: 0,
    },
    /* 42 - "NamedCode" */
    LookaheadDFA {
        prod0: 94,
        transitions: &[],
        k: 0,
    },
    /* 43 - "Null" */
    LookaheadDFA {
        prod0: 85,
        transitions: &[],
        k: 0,
    },
    /* 44 - "Object" */
    LookaheadDFA {
        prod0: 56,
        transitions: &[],
        k: 0,
    },
    /* 45 - "ObjectList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 57),
            Trans(0, 7, 1, 57),
            Trans(0, 8, 1, 57),
            Trans(0, 9, 1, 57),
            Trans(0, 10, 1, 57),
            Trans(0, 11, 1, 57),
            Trans(0, 19, 1, 57),
            Trans(0, 20, 1, 57),
            Trans(0, 23, 2, 58),
            Trans(0, 32, 1, 57),
        ],
        k: 1,
    },
    /* 46 - "ObjectOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 60),
            Trans(0, 7, 2, 60),
            Trans(0, 8, 2, 60),
            Trans(0, 9, 2, 60),
            Trans(0, 10, 2, 60),
            Trans(0, 11, 2, 60),
            Trans(0, 19, 2, 60),
            Trans(0, 20, 2, 60),
            Trans(0, 23, 2, 60),
            Trans(0, 29, 1, 59),
            Trans(0, 32, 2, 60),
        ],
        k: 1,
    },
    /* 47 - "Path" */
    LookaheadDFA {
        prod0: 87,
        transitions: &[],
        k: 0,
    },
    /* 48 - "RParen" */
    LookaheadDFA {
        prod0: 107,
        transitions: &[],
        k: 0,
    },
    /* 49 - "Section" */
    LookaheadDFA {
        prod0: 16,
        transitions: &[],
        k: 0,
    },
    /* 50 - "SectionBinding" */
    LookaheadDFA {
        prod0: 10,
        transitions: &[],
        k: 0,
    },
    /* 51 - "SectionBody" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 1, 17),
            Trans(0, 6, 1, 17),
            Trans(0, 7, 1, 17),
            Trans(0, 8, 1, 17),
            Trans(0, 9, 1, 17),
            Trans(0, 10, 1, 17),
            Trans(0, 11, 1, 17),
            Trans(0, 18, 1, 17),
            Trans(0, 19, 1, 17),
            Trans(0, 20, 1, 17),
            Trans(0, 22, 2, 20),
            Trans(0, 23, 1, 17),
            Trans(0, 28, 3, 21),
            Trans(0, 32, 1, 17),
        ],
        k: 1,
    },
    /* 52 - "SectionBodyList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 19),
            Trans(0, 6, 1, 18),
            Trans(0, 7, 1, 18),
            Trans(0, 8, 1, 18),
            Trans(0, 9, 1, 18),
            Trans(0, 10, 1, 18),
            Trans(0, 11, 1, 18),
            Trans(0, 18, 2, 19),
            Trans(0, 19, 1, 18),
            Trans(0, 20, 1, 18),
            Trans(0, 23, 2, 19),
            Trans(0, 32, 1, 18),
        ],
        k: 1,
    },
    /* 53 - "Str" */
    LookaheadDFA {
        prod0: 91,
        transitions: &[],
        k: 0,
    },
    /* 54 - "Strings" */
    LookaheadDFA {
        prod0: 88,
        transitions: &[],
        k: 0,
    },
    /* 55 - "StringsList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 90),
            Trans(0, 6, 2, 90),
            Trans(0, 7, 2, 90),
            Trans(0, 8, 2, 90),
            Trans(0, 9, 2, 90),
            Trans(0, 10, 2, 90),
            Trans(0, 11, 2, 90),
            Trans(0, 18, 2, 90),
            Trans(0, 19, 2, 90),
            Trans(0, 20, 2, 90),
            Trans(0, 23, 2, 90),
            Trans(0, 25, 2, 90),
            Trans(0, 27, 2, 90),
            Trans(0, 29, 2, 90),
            Trans(0, 30, 1, 89),
            Trans(0, 32, 2, 90),
        ],
        k: 1,
    },
    /* 56 - "Text" */
    LookaheadDFA {
        prod0: 92,
        transitions: &[],
        k: 0,
    },
    /* 57 - "TextBinding" */
    LookaheadDFA {
        prod0: 11,
        transitions: &[],
        k: 0,
    },
    /* 58 - "TextBindingOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 12, 2, 15), Trans(0, 17, 1, 14)],
        k: 1,
    },
    /* 59 - "TextBindingOpt0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 13),
            Trans(0, 6, 2, 13),
            Trans(0, 7, 2, 13),
            Trans(0, 8, 2, 13),
            Trans(0, 9, 2, 13),
            Trans(0, 10, 2, 13),
            Trans(0, 11, 2, 13),
            Trans(0, 16, 1, 12),
            Trans(0, 18, 2, 13),
            Trans(0, 19, 2, 13),
            Trans(0, 20, 2, 13),
            Trans(0, 23, 2, 13),
            Trans(0, 32, 2, 13),
        ],
        k: 1,
    },
    /* 60 - "TextStart" */
    LookaheadDFA {
        prod0: 111,
        transitions: &[],
        k: 0,
    },
    /* 61 - "True" */
    LookaheadDFA {
        prod0: 83,
        transitions: &[],
        k: 0,
    },
    /* 62 - "Tuple" */
    LookaheadDFA {
        prod0: 70,
        transitions: &[],
        k: 0,
    },
    /* 63 - "TupleElements" */
    LookaheadDFA {
        prod0: 73,
        transitions: &[],
        k: 0,
    },
    /* 64 - "TupleElementsOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 27, 2, 75), Trans(0, 29, 1, 74)],
        k: 1,
    },
    /* 65 - "TupleElementsTail" */
    LookaheadDFA {
        prod0: 76,
        transitions: &[],
        k: 0,
    },
    /* 66 - "TupleElementsTailOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 77),
            Trans(0, 6, 1, 77),
            Trans(0, 7, 1, 77),
            Trans(0, 8, 1, 77),
            Trans(0, 9, 1, 77),
            Trans(0, 10, 1, 77),
            Trans(0, 11, 1, 77),
            Trans(0, 13, 1, 77),
            Trans(0, 14, 1, 77),
            Trans(0, 15, 1, 77),
            Trans(0, 21, 1, 77),
            Trans(0, 22, 1, 77),
            Trans(0, 24, 1, 77),
            Trans(0, 26, 1, 77),
            Trans(0, 27, 2, 78),
        ],
        k: 1,
    },
    /* 67 - "TupleOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 1, 71),
            Trans(0, 6, 1, 71),
            Trans(0, 7, 1, 71),
            Trans(0, 8, 1, 71),
            Trans(0, 9, 1, 71),
            Trans(0, 10, 1, 71),
            Trans(0, 11, 1, 71),
            Trans(0, 13, 1, 71),
            Trans(0, 14, 1, 71),
            Trans(0, 15, 1, 71),
            Trans(0, 21, 1, 71),
            Trans(0, 22, 1, 71),
            Trans(0, 24, 1, 71),
            Trans(0, 26, 1, 71),
            Trans(0, 27, 2, 72),
        ],
        k: 1,
    },
    /* 68 - "Value" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 4, 46),
            Trans(0, 6, 5, 47),
            Trans(0, 7, 6, 48),
            Trans(0, 8, 6, 48),
            Trans(0, 9, 7, 49),
            Trans(0, 10, 9, 51),
            Trans(0, 11, 8, 50),
            Trans(0, 13, 10, 52),
            Trans(0, 14, 11, 53),
            Trans(0, 15, 12, 54),
            Trans(0, 21, 13, 55),
            Trans(0, 22, 1, 43),
            Trans(0, 24, 2, 44),
            Trans(0, 26, 3, 45),
        ],
        k: 1,
    },
    /* 69 - "ValueBinding" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
    /* 70 - "Ws" */
    LookaheadDFA {
        prod0: 97,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 113] = &[
    // 0 - Eure: EureList /* Vec */ EureList0 /* Vec */;
    Production {
        lhs: 23,
        production: &[ParseType::N(25), ParseType::N(24)],
    },
    // 1 - EureList0: Section EureList0;
    Production {
        lhs: 25,
        production: &[ParseType::N(25), ParseType::N(49)],
    },
    // 2 - EureList0: ;
    Production {
        lhs: 25,
        production: &[],
    },
    // 3 - EureList: Binding EureList;
    Production {
        lhs: 24,
        production: &[ParseType::N(24), ParseType::N(13)],
    },
    // 4 - EureList: ;
    Production {
        lhs: 24,
        production: &[],
    },
    // 5 - Binding: Keys BindingRhs;
    Production {
        lhs: 13,
        production: &[ParseType::N(14), ParseType::N(37)],
    },
    // 6 - BindingRhs: ValueBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(69)],
    },
    // 7 - BindingRhs: SectionBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(50)],
    },
    // 8 - BindingRhs: TextBinding;
    Production {
        lhs: 14,
        production: &[ParseType::N(57)],
    },
    // 9 - ValueBinding: Bind Value;
    Production {
        lhs: 69,
        production: &[ParseType::N(68), ParseType::N(12)],
    },
    // 10 - SectionBinding: Begin Eure End;
    Production {
        lhs: 50,
        production: &[ParseType::N(22), ParseType::N(23), ParseType::N(11)],
    },
    // 11 - TextBinding: TextStart TextBindingOpt /* Option */ Text TextBindingOpt0 /* Option */;
    Production {
        lhs: 57,
        production: &[
            ParseType::N(59),
            ParseType::N(56),
            ParseType::N(58),
            ParseType::N(60),
        ],
    },
    // 12 - TextBindingOpt0: GrammarNewline;
    Production {
        lhs: 59,
        production: &[ParseType::N(30)],
    },
    // 13 - TextBindingOpt0: ;
    Production {
        lhs: 59,
        production: &[],
    },
    // 14 - TextBindingOpt: Ws^ /* Clipped */;
    Production {
        lhs: 58,
        production: &[ParseType::N(70)],
    },
    // 15 - TextBindingOpt: ;
    Production {
        lhs: 58,
        production: &[],
    },
    // 16 - Section: At Keys SectionBody;
    Production {
        lhs: 49,
        production: &[ParseType::N(51), ParseType::N(37), ParseType::N(10)],
    },
    // 17 - SectionBody: SectionBodyList /* Vec */;
    Production {
        lhs: 51,
        production: &[ParseType::N(52)],
    },
    // 18 - SectionBodyList: Binding SectionBodyList;
    Production {
        lhs: 52,
        production: &[ParseType::N(52), ParseType::N(13)],
    },
    // 19 - SectionBodyList: ;
    Production {
        lhs: 52,
        production: &[],
    },
    // 20 - SectionBody: SectionBinding;
    Production {
        lhs: 51,
        production: &[ParseType::N(50)],
    },
    // 21 - SectionBody: DirectBind;
    Production {
        lhs: 51,
        production: &[ParseType::N(20)],
    },
    // 22 - DirectBind: Bind Value;
    Production {
        lhs: 20,
        production: &[ParseType::N(68), ParseType::N(12)],
    },
    // 23 - Keys: Key KeysList /* Vec */;
    Production {
        lhs: 37,
        production: &[ParseType::N(38), ParseType::N(34)],
    },
    // 24 - KeysList: Dot Key KeysList;
    Production {
        lhs: 38,
        production: &[ParseType::N(38), ParseType::N(34), ParseType::N(21)],
    },
    // 25 - KeysList: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 26 - Key: KeyBase KeyOpt /* Option */;
    Production {
        lhs: 34,
        production: &[ParseType::N(36), ParseType::N(35)],
    },
    // 27 - KeyOpt: ArrayMarker;
    Production {
        lhs: 36,
        production: &[ParseType::N(7)],
    },
    // 28 - KeyOpt: ;
    Production {
        lhs: 36,
        production: &[],
    },
    // 29 - ArrayMarker: ArrayBegin ArrayMarkerOpt /* Option */ ArrayEnd;
    Production {
        lhs: 7,
        production: &[ParseType::N(6), ParseType::N(8), ParseType::N(1)],
    },
    // 30 - ArrayMarkerOpt: Integer;
    Production {
        lhs: 8,
        production: &[ParseType::N(33)],
    },
    // 31 - ArrayMarkerOpt: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 32 - KeyBase: Ident;
    Production {
        lhs: 35,
        production: &[ParseType::N(32)],
    },
    // 33 - KeyBase: ExtensionNameSpace;
    Production {
        lhs: 35,
        production: &[ParseType::N(27)],
    },
    // 34 - KeyBase: Str;
    Production {
        lhs: 35,
        production: &[ParseType::N(53)],
    },
    // 35 - KeyBase: Integer;
    Production {
        lhs: 35,
        production: &[ParseType::N(33)],
    },
    // 36 - KeyBase: MetaExtKey;
    Production {
        lhs: 35,
        production: &[ParseType::N(41)],
    },
    // 37 - KeyBase: Null;
    Production {
        lhs: 35,
        production: &[ParseType::N(43)],
    },
    // 38 - KeyBase: True;
    Production {
        lhs: 35,
        production: &[ParseType::N(61)],
    },
    // 39 - KeyBase: False;
    Production {
        lhs: 35,
        production: &[ParseType::N(28)],
    },
    // 40 - KeyBase: Hole;
    Production {
        lhs: 35,
        production: &[ParseType::N(31)],
    },
    // 41 - ExtensionNameSpace: Ext Ident;
    Production {
        lhs: 27,
        production: &[ParseType::N(32), ParseType::N(26)],
    },
    // 42 - MetaExtKey: MetaExt Ident;
    Production {
        lhs: 41,
        production: &[ParseType::N(32), ParseType::N(40)],
    },
    // 43 - Value: Object;
    Production {
        lhs: 68,
        production: &[ParseType::N(44)],
    },
    // 44 - Value: Array;
    Production {
        lhs: 68,
        production: &[ParseType::N(0)],
    },
    // 45 - Value: Tuple;
    Production {
        lhs: 68,
        production: &[ParseType::N(62)],
    },
    // 46 - Value: Float;
    Production {
        lhs: 68,
        production: &[ParseType::N(29)],
    },
    // 47 - Value: Integer;
    Production {
        lhs: 68,
        production: &[ParseType::N(33)],
    },
    // 48 - Value: Boolean;
    Production {
        lhs: 68,
        production: &[ParseType::N(15)],
    },
    // 49 - Value: Null;
    Production {
        lhs: 68,
        production: &[ParseType::N(43)],
    },
    // 50 - Value: Strings;
    Production {
        lhs: 68,
        production: &[ParseType::N(54)],
    },
    // 51 - Value: Hole;
    Production {
        lhs: 68,
        production: &[ParseType::N(31)],
    },
    // 52 - Value: CodeBlock;
    Production {
        lhs: 68,
        production: &[ParseType::N(17)],
    },
    // 53 - Value: NamedCode;
    Production {
        lhs: 68,
        production: &[ParseType::N(42)],
    },
    // 54 - Value: Code;
    Production {
        lhs: 68,
        production: &[ParseType::N(16)],
    },
    // 55 - Value: Path;
    Production {
        lhs: 68,
        production: &[ParseType::N(47)],
    },
    // 56 - Object: Begin ObjectList /* Vec */ End;
    Production {
        lhs: 44,
        production: &[ParseType::N(22), ParseType::N(45), ParseType::N(11)],
    },
    // 57 - ObjectList: Key Bind Value ObjectOpt /* Option */ ObjectList;
    Production {
        lhs: 45,
        production: &[
            ParseType::N(45),
            ParseType::N(46),
            ParseType::N(68),
            ParseType::N(12),
            ParseType::N(34),
        ],
    },
    // 58 - ObjectList: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 59 - ObjectOpt: Comma;
    Production {
        lhs: 46,
        production: &[ParseType::N(18)],
    },
    // 60 - ObjectOpt: ;
    Production {
        lhs: 46,
        production: &[],
    },
    // 61 - Array: ArrayBegin ArrayOpt /* Option */ ArrayEnd;
    Production {
        lhs: 0,
        production: &[ParseType::N(6), ParseType::N(9), ParseType::N(1)],
    },
    // 62 - ArrayOpt: ArrayElements;
    Production {
        lhs: 9,
        production: &[ParseType::N(2)],
    },
    // 63 - ArrayOpt: ;
    Production {
        lhs: 9,
        production: &[],
    },
    // 64 - ArrayElements: Value ArrayElementsOpt /* Option */;
    Production {
        lhs: 2,
        production: &[ParseType::N(3), ParseType::N(68)],
    },
    // 65 - ArrayElementsOpt: ArrayElementsTail;
    Production {
        lhs: 3,
        production: &[ParseType::N(4)],
    },
    // 66 - ArrayElementsOpt: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 67 - ArrayElementsTail: Comma ArrayElementsTailOpt /* Option */;
    Production {
        lhs: 4,
        production: &[ParseType::N(5), ParseType::N(18)],
    },
    // 68 - ArrayElementsTailOpt: ArrayElements;
    Production {
        lhs: 5,
        production: &[ParseType::N(2)],
    },
    // 69 - ArrayElementsTailOpt: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 70 - Tuple: LParen TupleOpt /* Option */ RParen;
    Production {
        lhs: 62,
        production: &[ParseType::N(48), ParseType::N(67), ParseType::N(39)],
    },
    // 71 - TupleOpt: TupleElements;
    Production {
        lhs: 67,
        production: &[ParseType::N(63)],
    },
    // 72 - TupleOpt: ;
    Production {
        lhs: 67,
        production: &[],
    },
    // 73 - TupleElements: Value TupleElementsOpt /* Option */;
    Production {
        lhs: 63,
        production: &[ParseType::N(64), ParseType::N(68)],
    },
    // 74 - TupleElementsOpt: TupleElementsTail;
    Production {
        lhs: 64,
        production: &[ParseType::N(65)],
    },
    // 75 - TupleElementsOpt: ;
    Production {
        lhs: 64,
        production: &[],
    },
    // 76 - TupleElementsTail: Comma TupleElementsTailOpt /* Option */;
    Production {
        lhs: 65,
        production: &[ParseType::N(66), ParseType::N(18)],
    },
    // 77 - TupleElementsTailOpt: TupleElements;
    Production {
        lhs: 66,
        production: &[ParseType::N(63)],
    },
    // 78 - TupleElementsTailOpt: ;
    Production {
        lhs: 66,
        production: &[],
    },
    // 79 - Float: /[-+]?(\d+\.\d*|\d*\.\d+)([eE][-+]?\d+)?|[-+]?\d+[eE][-+]?\d+|[-+]?[Ii]nf|[Nn]a[Nn]/;
    Production {
        lhs: 29,
        production: &[ParseType::T(5)],
    },
    // 80 - Integer: /\d[\d_]*/;
    Production {
        lhs: 33,
        production: &[ParseType::T(6)],
    },
    // 81 - Boolean: True;
    Production {
        lhs: 15,
        production: &[ParseType::N(61)],
    },
    // 82 - Boolean: False;
    Production {
        lhs: 15,
        production: &[ParseType::N(28)],
    },
    // 83 - True: 'true';
    Production {
        lhs: 61,
        production: &[ParseType::T(7)],
    },
    // 84 - False: 'false';
    Production {
        lhs: 28,
        production: &[ParseType::T(8)],
    },
    // 85 - Null: 'null';
    Production {
        lhs: 43,
        production: &[ParseType::T(9)],
    },
    // 86 - Hole: '!';
    Production {
        lhs: 31,
        production: &[ParseType::T(10)],
    },
    // 87 - Path: Dot Keys;
    Production {
        lhs: 47,
        production: &[ParseType::N(37), ParseType::N(21)],
    },
    // 88 - Strings: Str StringsList /* Vec */;
    Production {
        lhs: 54,
        production: &[ParseType::N(55), ParseType::N(53)],
    },
    // 89 - StringsList: Continue Str StringsList;
    Production {
        lhs: 55,
        production: &[ParseType::N(55), ParseType::N(53), ParseType::N(19)],
    },
    // 90 - StringsList: ;
    Production {
        lhs: 55,
        production: &[],
    },
    // 91 - Str: /"([^"]|\\")*"/;
    Production {
        lhs: 53,
        production: &[ParseType::T(11)],
    },
    // 92 - Text: /[^\r\n]*/;
    Production {
        lhs: 56,
        production: &[ParseType::T(12)],
    },
    // 93 - CodeBlock: /```[a-zA-Z0-9-_]*(\r\n|\r|\n)([^`]|[`]{1,2})*```/;
    Production {
        lhs: 17,
        production: &[ParseType::T(13)],
    },
    // 94 - NamedCode: /[a-zA-Z0-9-_]+`([^`\r\n]|\\`)*`/;
    Production {
        lhs: 42,
        production: &[ParseType::T(14)],
    },
    // 95 - Code: /`([^`\r\n]|\\`)*`/;
    Production {
        lhs: 16,
        production: &[ParseType::T(15)],
    },
    // 96 - GrammarNewline: /\r\n|\r|\n/;
    Production {
        lhs: 30,
        production: &[ParseType::T(16)],
    },
    // 97 - Ws: /[\s--\r\n]+/;
    Production {
        lhs: 70,
        production: &[ParseType::T(17)],
    },
    // 98 - At: '@';
    Production {
        lhs: 10,
        production: &[ParseType::T(18)],
    },
    // 99 - MetaExt: '$$';
    Production {
        lhs: 40,
        production: &[ParseType::T(19)],
    },
    // 100 - Ext: '$';
    Production {
        lhs: 26,
        production: &[ParseType::T(20)],
    },
    // 101 - Dot: '.';
    Production {
        lhs: 21,
        production: &[ParseType::T(21)],
    },
    // 102 - Begin: '{';
    Production {
        lhs: 11,
        production: &[ParseType::T(22)],
    },
    // 103 - End: '}';
    Production {
        lhs: 22,
        production: &[ParseType::T(23)],
    },
    // 104 - ArrayBegin: '[';
    Production {
        lhs: 1,
        production: &[ParseType::T(24)],
    },
    // 105 - ArrayEnd: ']';
    Production {
        lhs: 6,
        production: &[ParseType::T(25)],
    },
    // 106 - LParen: '(';
    Production {
        lhs: 39,
        production: &[ParseType::T(26)],
    },
    // 107 - RParen: ')';
    Production {
        lhs: 48,
        production: &[ParseType::T(27)],
    },
    // 108 - Bind: '=';
    Production {
        lhs: 12,
        production: &[ParseType::T(28)],
    },
    // 109 - Comma: ',';
    Production {
        lhs: 18,
        production: &[ParseType::T(29)],
    },
    // 110 - Continue: '\\';
    Production {
        lhs: 19,
        production: &[ParseType::T(30)],
    },
    // 111 - TextStart: ":";
    Production {
        lhs: 60,
        production: &[ParseType::T(31)],
    },
    // 112 - Ident: /[\p{XID_Start}_][\p{XID_Continue}-]*/;
    Production {
        lhs: 32,
        production: &[ParseType::T(32)],
    },
];

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut Grammar<'t>,
) -> Result<ParseTree, ParolError>
where
    T: AsRef<Path>,
{
    use parol_runtime::{
        parser::{parse_tree_type::SynTree, parser_types::SynTreeFlavor},
        syntree::Builder,
    };
    let mut builder = Builder::<SynTree, SynTreeFlavor>::new_with();
    parse_into(input, &mut builder, file_name, user_actions)?;
    Ok(builder.build()?)
}
#[allow(dead_code)]
pub fn parse_into<'t, T: TreeConstruct<'t>>(
    input: &'t str,
    tree_builder: &mut T,
    file_name: impl AsRef<Path>,
    user_actions: &mut Grammar<'t>,
) -> Result<(), ParolError>
where
    ParolError: From<T::Error>,
{
    use grammar_scanner::GrammarScanner;
    let mut llk_parser = LLKParser::new(
        23,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let scanner = GrammarScanner::new();
    // Initialize wrapper
    let mut user_actions = GrammarAuto::new(user_actions);
    llk_parser.parse_into(
        tree_builder,
        TokenStream::new(
            input,
            file_name,
            scanner.scanner_impl.clone(),
            &GrammarScanner::match_function,
            MAX_K,
        )
        .unwrap(),
        &mut user_actions,
    )
}
