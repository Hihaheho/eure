%start Eure
%title "EURE"
%grammar_type 'LL(k)'
%line_comment "#"

%on TextStart %enter Text

%scanner Text {
  %auto_newline_off
  %auto_ws_off
  %on Text %enter INITIAL
}

%%

Eure: { Binding } { Section } ;

Binding: Keys BindingRhs ;
  BindingRhs: ValueBinding | SectionBinding | TextBinding ;
  ValueBinding: Bind Value ;
  SectionBinding: Begin Eure End ;
  TextBinding: TextStart [Ws^] Text [GrammarNewline] ;

Section: At Keys SectionBody ;
  SectionBody: { Binding } | SectionBinding | DirectBind ;
  DirectBind: Bind Value ;
  Keys: Key { Dot Key } ;
  Key: KeyBase [ ArrayMarker ] ;
  ArrayMarker: ArrayBegin [ Integer ] ArrayEnd ;
  KeyBase: Ident | ExtensionNameSpace | Str | Integer | MetaExtKey | Null | True | False | Hole ;
  // extension name must always be valid ident, not quoted ident
  ExtensionNameSpace: Ext Ident ;
  MetaExtKey: MetaExt Ident ;

Value: Object | Array | Tuple | Float | Integer | Boolean | Null | Strings | Hole | CodeBlock | NamedCode | Code | Path ;
  Object: Begin { Key Bind Value [ Comma ] } End ;
  Array: ArrayBegin [ ArrayElements ] ArrayEnd ;
  ArrayElements: Value [ ArrayElementsTail ] ;
  ArrayElementsTail: Comma [ ArrayElements ] ;
  Tuple: LParen [ TupleElements ] RParen ;
  TupleElements: Value [ TupleElementsTail ] ;
  TupleElementsTail: Comma [ TupleElements ] ;
  Float: /[-+]?(\d+\.\d*|\d*\.\d+)([eE][-+]?\d+)?|[-+]?\d+[eE][-+]?\d+|[-+]?[Ii]nf|[Nn]a[Nn]/ ;
  Integer: /\d[\d_]*/ ;
  Boolean: True | False ;
  True: 'true' ;
  False: 'false';
  Null: 'null' ;
  Hole: '!' ;
  Path: Dot Keys ;

Strings: Str { Continue Str } ;
Str: /"([^"]|\\")*"/ ;

// No escape character in text
Text: <Text>/[^\r\n]*/ ;

CodeBlock: /```[a-zA-Z0-9-_]*(\r\n|\r|\n)([^`]|[`]{1,2})*```/;

NamedCode: /[a-zA-Z0-9-_]+`([^`\r\n]|\\`)*`/ ;
Code: /`([^`\r\n]|\\`)*`/ ;

GrammarNewline: <Text>/\r\n|\r|\n/ ;
Ws: <Text>/[\s--\r\n]+/ ;
At: '@' ;
MetaExt: '$$' ;
Ext: '$' ;
Dot: '.' ;
Begin: '{' ;
End: '}' ;
ArrayBegin: '[' ;
ArrayEnd: ']' ;
LParen: '(' ;
RParen: ')' ;
Bind: '=' ;
Comma: ',' ;
Continue: '\\' ;
TextStart: ":" ;
Ident: /[\p{XID_Start}_][\p{XID_Continue}-]*/ ;
