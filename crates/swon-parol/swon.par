%start Swon
%title "SWON"
%grammar_type 'LL(k)'
%line_comment "#"

%on Quote, TypedQuote, TextStart %enter String

%scanner String {
  %auto_newline_off
  %auto_ws_off
  %on Quote, Newline %enter INITIAL
}

%%

Swon: { Binding } { Section } ;

Binding: Keys Bindings ;
  Bindings: ValueBinding | SectionBinding | TextBinding ;
  ValueBinding: Bind Value ;
  SectionBinding: Begin Swon End ;
  TextBinding: TextStart [Ws^] Chars Newline ;

Section: At Keys { Binding } ;
  Keys: Key { Dot Key } ;
  Key: KeyBase [ ArrayMarker ] ;
  ArrayMarker: ArrayBegin [ Integer ] ArrayEnd ;
  KeyBase: Ident | ExtensionNameSpace | String ;
  // extension name must always be valid ident, not quoted ident
  ExtensionNameSpace: Ext Ident ;

Value: Object | Array | Integer | Boolean | Null | StringContinues | TypedString | Hole ;
  Object: Begin { Key Bind Value [ Comma ] } End ;
  Array: ArrayBegin { Value [ Comma ] } ArrayEnd ;
  Integer: /\d[\d_]*/ ;
  Boolean: True | False ;
  True: 'true' ;
  False: 'false';
  Null: 'null' ;
  Hole: HoleStart Ident ;

StringContinues: String { Continue String } ;
String: Quote Chars Quote ;
TypedString: TypedQuote Chars Quote ;
Chars: /(\\[nrt\\"0]|\p{Letter}|\p{Mark}|\p{Number}|[\p{Punctuation}--\\"]|\p{Symbol}|\p{Space_Separator})*"/;
Quote: <INITIAL, String>'"' ;
TypedQuote: <INITIAL, String>/\p{XID_Start}\p{XID_Continue}*"/ ;

Newline: <String>/\r\n|\r|\n/ ;
Ws: <String>/[\s--\r\n]+/ ;
At: '@' ;
Ext: '$' ;
Dot: '.' ;
Begin: '{' ;
End: '}' ;
ArrayBegin: '[' ;
ArrayEnd: ']' ;
Bind: '=' ;
Comma: ',' ;
Continue: '\\' ;
TextStart: ":" ;
HoleStart: "\!" ;
Ident: /\p{XID_Start}\p{XID_Continue}*/ ;
