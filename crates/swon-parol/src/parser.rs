// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::grammar::Grammar;
use crate::grammar_trait::GrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 24] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r"todo",
    /*  6 */ r"\p{XID_Start}\p{XID_Continue}*",
    /*  7 */ r"\d[\d_]*",
    /*  8 */ r"true",
    /*  9 */ r"false",
    /* 10 */ r"null",
    /* 11 */
    r#""(\\[nrt\\"0]|\p{Letter}|\p{Mark}|\p{Number}|[\p{Punctuation}--\\"]|\p{Symbol}|\p{Space_Separator})*""#,
    /* 12 */ r"@",
    /* 13 */ r"\$",
    /* 14 */ r"\.",
    /* 15 */ r"\{",
    /* 16 */ r"\}",
    /* 17 */ r"\[",
    /* 18 */ r"\]",
    /* 19 */ r"=",
    /* 20 */ r",",
    /* 21 */ r"\\\\",
    /* 22 */ r":",
    /* 23 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 24] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Text",
    /*  6 */ "Ident",
    /*  7 */ "Integer",
    /*  8 */ "True",
    /*  9 */ "False",
    /* 10 */ "Null",
    /* 11 */ "String",
    /* 12 */ "At",
    /* 13 */ "Ext",
    /* 14 */ "Dot",
    /* 15 */ "Begin",
    /* 16 */ "End",
    /* 17 */ "ArrayBegin",
    /* 18 */ "ArrayEnd",
    /* 19 */ "Bind",
    /* 20 */ "Comma",
    /* 21 */ "Continue",
    /* 22 */ "TextStart",
    /* 23 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 18]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"(#.*(\r\n|\r|\n|$))",
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Text */
        6,  /* Ident */
        7,  /* Integer */
        8,  /* True */
        9,  /* False */
        10, /* Null */
        11, /* String */
        12, /* At */
        13, /* Ext */
        14, /* Dot */
        15, /* Begin */
        16, /* End */
        17, /* ArrayBegin */
        18, /* ArrayEnd */
        19, /* Bind */
        20, /* Comma */
        21, /* Continue */
        22, /* TextStart */
    ],
);

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 46] = &[
    /*  0 */ "Array",
    /*  1 */ "ArrayBegin",
    /*  2 */ "ArrayEnd",
    /*  3 */ "ArrayList",
    /*  4 */ "ArrayMarker",
    /*  5 */ "ArrayMarkerOpt",
    /*  6 */ "ArrayOpt",
    /*  7 */ "At",
    /*  8 */ "Begin",
    /*  9 */ "Bind",
    /* 10 */ "Binding",
    /* 11 */ "Bindings",
    /* 12 */ "Boolean",
    /* 13 */ "Comma",
    /* 14 */ "Continue",
    /* 15 */ "Dot",
    /* 16 */ "End",
    /* 17 */ "Ext",
    /* 18 */ "ExtensionNameSpace",
    /* 19 */ "False",
    /* 20 */ "Ident",
    /* 21 */ "Integer",
    /* 22 */ "Key",
    /* 23 */ "KeyBase",
    /* 24 */ "KeyOpt",
    /* 25 */ "Keys",
    /* 26 */ "KeysList",
    /* 27 */ "Null",
    /* 28 */ "Object",
    /* 29 */ "ObjectList",
    /* 30 */ "ObjectOpt",
    /* 31 */ "Section",
    /* 32 */ "SectionBinding",
    /* 33 */ "SectionList",
    /* 34 */ "String",
    /* 35 */ "StringContinues",
    /* 36 */ "StringContinuesList",
    /* 37 */ "Swon",
    /* 38 */ "SwonList",
    /* 39 */ "SwonList0",
    /* 40 */ "Text",
    /* 41 */ "TextBinding",
    /* 42 */ "TextStart",
    /* 43 */ "True",
    /* 44 */ "Value",
    /* 45 */ "ValueBinding",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 46] = &[
    /* 0 - "Array" */
    LookaheadDFA {
        prod0: 41,
        transitions: &[],
        k: 0,
    },
    /* 1 - "ArrayBegin" */
    LookaheadDFA {
        prod0: 61,
        transitions: &[],
        k: 0,
    },
    /* 2 - "ArrayEnd" */
    LookaheadDFA {
        prod0: 62,
        transitions: &[],
        k: 0,
    },
    /* 3 - "ArrayList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 1, 42),
            Trans(0, 8, 1, 42),
            Trans(0, 9, 1, 42),
            Trans(0, 10, 1, 42),
            Trans(0, 11, 1, 42),
            Trans(0, 15, 1, 42),
            Trans(0, 17, 1, 42),
            Trans(0, 18, 2, 43),
        ],
        k: 1,
    },
    /* 4 - "ArrayMarker" */
    LookaheadDFA {
        prod0: 22,
        transitions: &[],
        k: 0,
    },
    /* 5 - "ArrayMarkerOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 7, 1, 23), Trans(0, 18, 2, 24)],
        k: 1,
    },
    /* 6 - "ArrayOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 2, 45),
            Trans(0, 8, 2, 45),
            Trans(0, 9, 2, 45),
            Trans(0, 10, 2, 45),
            Trans(0, 11, 2, 45),
            Trans(0, 15, 2, 45),
            Trans(0, 17, 2, 45),
            Trans(0, 18, 2, 45),
            Trans(0, 20, 1, 44),
        ],
        k: 1,
    },
    /* 7 - "At" */
    LookaheadDFA {
        prod0: 56,
        transitions: &[],
        k: 0,
    },
    /* 8 - "Begin" */
    LookaheadDFA {
        prod0: 59,
        transitions: &[],
        k: 0,
    },
    /* 9 - "Bind" */
    LookaheadDFA {
        prod0: 63,
        transitions: &[],
        k: 0,
    },
    /* 10 - "Binding" */
    LookaheadDFA {
        prod0: 5,
        transitions: &[],
        k: 0,
    },
    /* 11 - "Bindings" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 15, 2, 7), Trans(0, 19, 1, 6), Trans(0, 22, 3, 8)],
        k: 1,
    },
    /* 12 - "Boolean" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 8, 1, 47), Trans(0, 9, 2, 48)],
        k: 1,
    },
    /* 13 - "Comma" */
    LookaheadDFA {
        prod0: 64,
        transitions: &[],
        k: 0,
    },
    /* 14 - "Continue" */
    LookaheadDFA {
        prod0: 65,
        transitions: &[],
        k: 0,
    },
    /* 15 - "Dot" */
    LookaheadDFA {
        prod0: 58,
        transitions: &[],
        k: 0,
    },
    /* 16 - "End" */
    LookaheadDFA {
        prod0: 60,
        transitions: &[],
        k: 0,
    },
    /* 17 - "Ext" */
    LookaheadDFA {
        prod0: 57,
        transitions: &[],
        k: 0,
    },
    /* 18 - "ExtensionNameSpace" */
    LookaheadDFA {
        prod0: 29,
        transitions: &[],
        k: 0,
    },
    /* 19 - "False" */
    LookaheadDFA {
        prod0: 50,
        transitions: &[],
        k: 0,
    },
    /* 20 - "Ident" */
    LookaheadDFA {
        prod0: 28,
        transitions: &[],
        k: 0,
    },
    /* 21 - "Integer" */
    LookaheadDFA {
        prod0: 46,
        transitions: &[],
        k: 0,
    },
    /* 22 - "Key" */
    LookaheadDFA {
        prod0: 19,
        transitions: &[],
        k: 0,
    },
    /* 23 - "KeyBase" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 6, 1, 25), Trans(0, 11, 3, 27), Trans(0, 13, 2, 26)],
        k: 1,
    },
    /* 24 - "KeyOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 21),
            Trans(0, 6, 2, 21),
            Trans(0, 11, 2, 21),
            Trans(0, 12, 2, 21),
            Trans(0, 13, 2, 21),
            Trans(0, 14, 2, 21),
            Trans(0, 15, 2, 21),
            Trans(0, 16, 2, 21),
            Trans(0, 17, 1, 20),
            Trans(0, 19, 2, 21),
            Trans(0, 22, 2, 21),
        ],
        k: 1,
    },
    /* 25 - "Keys" */
    LookaheadDFA {
        prod0: 16,
        transitions: &[],
        k: 0,
    },
    /* 26 - "KeysList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 18),
            Trans(0, 6, 2, 18),
            Trans(0, 11, 2, 18),
            Trans(0, 12, 2, 18),
            Trans(0, 13, 2, 18),
            Trans(0, 14, 1, 17),
            Trans(0, 15, 2, 18),
            Trans(0, 16, 2, 18),
            Trans(0, 19, 2, 18),
            Trans(0, 22, 2, 18),
        ],
        k: 1,
    },
    /* 27 - "Null" */
    LookaheadDFA {
        prod0: 51,
        transitions: &[],
        k: 0,
    },
    /* 28 - "Object" */
    LookaheadDFA {
        prod0: 36,
        transitions: &[],
        k: 0,
    },
    /* 29 - "ObjectList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 1, 37),
            Trans(0, 11, 1, 37),
            Trans(0, 13, 1, 37),
            Trans(0, 16, 2, 38),
        ],
        k: 1,
    },
    /* 30 - "ObjectOpt" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 40),
            Trans(0, 11, 2, 40),
            Trans(0, 13, 2, 40),
            Trans(0, 16, 2, 40),
            Trans(0, 20, 1, 39),
        ],
        k: 1,
    },
    /* 31 - "Section" */
    LookaheadDFA {
        prod0: 13,
        transitions: &[],
        k: 0,
    },
    /* 32 - "SectionBinding" */
    LookaheadDFA {
        prod0: 10,
        transitions: &[],
        k: 0,
    },
    /* 33 - "SectionList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 15),
            Trans(0, 6, 1, 14),
            Trans(0, 11, 1, 14),
            Trans(0, 12, 2, 15),
            Trans(0, 13, 1, 14),
            Trans(0, 16, 2, 15),
        ],
        k: 1,
    },
    /* 34 - "String" */
    LookaheadDFA {
        prod0: 55,
        transitions: &[],
        k: 0,
    },
    /* 35 - "StringContinues" */
    LookaheadDFA {
        prod0: 52,
        transitions: &[],
        k: 0,
    },
    /* 36 - "StringContinuesList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 54),
            Trans(0, 6, 2, 54),
            Trans(0, 7, 2, 54),
            Trans(0, 8, 2, 54),
            Trans(0, 9, 2, 54),
            Trans(0, 10, 2, 54),
            Trans(0, 11, 2, 54),
            Trans(0, 12, 2, 54),
            Trans(0, 13, 2, 54),
            Trans(0, 15, 2, 54),
            Trans(0, 16, 2, 54),
            Trans(0, 17, 2, 54),
            Trans(0, 18, 2, 54),
            Trans(0, 20, 2, 54),
            Trans(0, 21, 1, 53),
        ],
        k: 1,
    },
    /* 37 - "Swon" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
    /* 38 - "SwonList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 4),
            Trans(0, 6, 1, 3),
            Trans(0, 11, 1, 3),
            Trans(0, 12, 2, 4),
            Trans(0, 13, 1, 3),
            Trans(0, 16, 2, 4),
        ],
        k: 1,
    },
    /* 39 - "SwonList0" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 0, 2, 2), Trans(0, 12, 1, 1), Trans(0, 16, 2, 2)],
        k: 1,
    },
    /* 40 - "Text" */
    LookaheadDFA {
        prod0: 12,
        transitions: &[],
        k: 0,
    },
    /* 41 - "TextBinding" */
    LookaheadDFA {
        prod0: 11,
        transitions: &[],
        k: 0,
    },
    /* 42 - "TextStart" */
    LookaheadDFA {
        prod0: 66,
        transitions: &[],
        k: 0,
    },
    /* 43 - "True" */
    LookaheadDFA {
        prod0: 49,
        transitions: &[],
        k: 0,
    },
    /* 44 - "Value" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 3, 32),
            Trans(0, 8, 4, 33),
            Trans(0, 9, 4, 33),
            Trans(0, 10, 5, 34),
            Trans(0, 11, 6, 35),
            Trans(0, 15, 1, 30),
            Trans(0, 17, 2, 31),
        ],
        k: 1,
    },
    /* 45 - "ValueBinding" */
    LookaheadDFA {
        prod0: 9,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 67] = &[
    // 0 - Swon: SwonList /* Vec */ SwonList0 /* Vec */;
    Production {
        lhs: 37,
        production: &[ParseType::N(39), ParseType::N(38)],
    },
    // 1 - SwonList0: Section SwonList0;
    Production {
        lhs: 39,
        production: &[ParseType::N(39), ParseType::N(31)],
    },
    // 2 - SwonList0: ;
    Production {
        lhs: 39,
        production: &[],
    },
    // 3 - SwonList: Binding SwonList;
    Production {
        lhs: 38,
        production: &[ParseType::N(38), ParseType::N(10)],
    },
    // 4 - SwonList: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 5 - Binding: Keys Bindings;
    Production {
        lhs: 10,
        production: &[ParseType::N(11), ParseType::N(25)],
    },
    // 6 - Bindings: ValueBinding;
    Production {
        lhs: 11,
        production: &[ParseType::N(45)],
    },
    // 7 - Bindings: SectionBinding;
    Production {
        lhs: 11,
        production: &[ParseType::N(32)],
    },
    // 8 - Bindings: TextBinding;
    Production {
        lhs: 11,
        production: &[ParseType::N(41)],
    },
    // 9 - ValueBinding: Bind Value;
    Production {
        lhs: 45,
        production: &[ParseType::N(44), ParseType::N(9)],
    },
    // 10 - SectionBinding: Begin Swon End;
    Production {
        lhs: 32,
        production: &[ParseType::N(16), ParseType::N(37), ParseType::N(8)],
    },
    // 11 - TextBinding: TextStart Text;
    Production {
        lhs: 41,
        production: &[ParseType::N(40), ParseType::N(42)],
    },
    // 12 - Text: /todo/;
    Production {
        lhs: 40,
        production: &[ParseType::T(5)],
    },
    // 13 - Section: At Keys SectionList /* Vec */;
    Production {
        lhs: 31,
        production: &[ParseType::N(33), ParseType::N(25), ParseType::N(7)],
    },
    // 14 - SectionList: Binding SectionList;
    Production {
        lhs: 33,
        production: &[ParseType::N(33), ParseType::N(10)],
    },
    // 15 - SectionList: ;
    Production {
        lhs: 33,
        production: &[],
    },
    // 16 - Keys: Key KeysList /* Vec */;
    Production {
        lhs: 25,
        production: &[ParseType::N(26), ParseType::N(22)],
    },
    // 17 - KeysList: Dot Key KeysList;
    Production {
        lhs: 26,
        production: &[ParseType::N(26), ParseType::N(22), ParseType::N(15)],
    },
    // 18 - KeysList: ;
    Production {
        lhs: 26,
        production: &[],
    },
    // 19 - Key: KeyBase KeyOpt /* Option */;
    Production {
        lhs: 22,
        production: &[ParseType::N(24), ParseType::N(23)],
    },
    // 20 - KeyOpt: ArrayMarker;
    Production {
        lhs: 24,
        production: &[ParseType::N(4)],
    },
    // 21 - KeyOpt: ;
    Production {
        lhs: 24,
        production: &[],
    },
    // 22 - ArrayMarker: ArrayBegin ArrayMarkerOpt /* Option */ ArrayEnd;
    Production {
        lhs: 4,
        production: &[ParseType::N(2), ParseType::N(5), ParseType::N(1)],
    },
    // 23 - ArrayMarkerOpt: Integer;
    Production {
        lhs: 5,
        production: &[ParseType::N(21)],
    },
    // 24 - ArrayMarkerOpt: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 25 - KeyBase: Ident;
    Production {
        lhs: 23,
        production: &[ParseType::N(20)],
    },
    // 26 - KeyBase: ExtensionNameSpace;
    Production {
        lhs: 23,
        production: &[ParseType::N(18)],
    },
    // 27 - KeyBase: String;
    Production {
        lhs: 23,
        production: &[ParseType::N(34)],
    },
    // 28 - Ident: /\p{XID_Start}\p{XID_Continue}*/;
    Production {
        lhs: 20,
        production: &[ParseType::T(6)],
    },
    // 29 - ExtensionNameSpace: Ext Ident;
    Production {
        lhs: 18,
        production: &[ParseType::N(20), ParseType::N(17)],
    },
    // 30 - Value: Object;
    Production {
        lhs: 44,
        production: &[ParseType::N(28)],
    },
    // 31 - Value: Array;
    Production {
        lhs: 44,
        production: &[ParseType::N(0)],
    },
    // 32 - Value: Integer;
    Production {
        lhs: 44,
        production: &[ParseType::N(21)],
    },
    // 33 - Value: Boolean;
    Production {
        lhs: 44,
        production: &[ParseType::N(12)],
    },
    // 34 - Value: Null;
    Production {
        lhs: 44,
        production: &[ParseType::N(27)],
    },
    // 35 - Value: StringContinues;
    Production {
        lhs: 44,
        production: &[ParseType::N(35)],
    },
    // 36 - Object: Begin ObjectList /* Vec */ End;
    Production {
        lhs: 28,
        production: &[ParseType::N(16), ParseType::N(29), ParseType::N(8)],
    },
    // 37 - ObjectList: Key Bind Value ObjectOpt /* Option */ ObjectList;
    Production {
        lhs: 29,
        production: &[
            ParseType::N(29),
            ParseType::N(30),
            ParseType::N(44),
            ParseType::N(9),
            ParseType::N(22),
        ],
    },
    // 38 - ObjectList: ;
    Production {
        lhs: 29,
        production: &[],
    },
    // 39 - ObjectOpt: Comma;
    Production {
        lhs: 30,
        production: &[ParseType::N(13)],
    },
    // 40 - ObjectOpt: ;
    Production {
        lhs: 30,
        production: &[],
    },
    // 41 - Array: ArrayBegin ArrayList /* Vec */ ArrayEnd;
    Production {
        lhs: 0,
        production: &[ParseType::N(2), ParseType::N(3), ParseType::N(1)],
    },
    // 42 - ArrayList: Value ArrayOpt /* Option */ ArrayList;
    Production {
        lhs: 3,
        production: &[ParseType::N(3), ParseType::N(6), ParseType::N(44)],
    },
    // 43 - ArrayList: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 44 - ArrayOpt: Comma;
    Production {
        lhs: 6,
        production: &[ParseType::N(13)],
    },
    // 45 - ArrayOpt: ;
    Production {
        lhs: 6,
        production: &[],
    },
    // 46 - Integer: /\d[\d_]*/;
    Production {
        lhs: 21,
        production: &[ParseType::T(7)],
    },
    // 47 - Boolean: True;
    Production {
        lhs: 12,
        production: &[ParseType::N(43)],
    },
    // 48 - Boolean: False;
    Production {
        lhs: 12,
        production: &[ParseType::N(19)],
    },
    // 49 - True: 'true';
    Production {
        lhs: 43,
        production: &[ParseType::T(8)],
    },
    // 50 - False: 'false';
    Production {
        lhs: 19,
        production: &[ParseType::T(9)],
    },
    // 51 - Null: 'null';
    Production {
        lhs: 27,
        production: &[ParseType::T(10)],
    },
    // 52 - StringContinues: String StringContinuesList /* Vec */;
    Production {
        lhs: 35,
        production: &[ParseType::N(36), ParseType::N(34)],
    },
    // 53 - StringContinuesList: Continue String StringContinuesList;
    Production {
        lhs: 36,
        production: &[ParseType::N(36), ParseType::N(34), ParseType::N(14)],
    },
    // 54 - StringContinuesList: ;
    Production {
        lhs: 36,
        production: &[],
    },
    // 55 - String: /"(\\[nrt\\"0]|\p{Letter}|\p{Mark}|\p{Number}|[\p{Punctuation}--\\"]|\p{Symbol}|\p{Space_Separator})*"/;
    Production {
        lhs: 34,
        production: &[ParseType::T(11)],
    },
    // 56 - At: '@';
    Production {
        lhs: 7,
        production: &[ParseType::T(12)],
    },
    // 57 - Ext: '$';
    Production {
        lhs: 17,
        production: &[ParseType::T(13)],
    },
    // 58 - Dot: '.';
    Production {
        lhs: 15,
        production: &[ParseType::T(14)],
    },
    // 59 - Begin: '{';
    Production {
        lhs: 8,
        production: &[ParseType::T(15)],
    },
    // 60 - End: '}';
    Production {
        lhs: 16,
        production: &[ParseType::T(16)],
    },
    // 61 - ArrayBegin: '[';
    Production {
        lhs: 1,
        production: &[ParseType::T(17)],
    },
    // 62 - ArrayEnd: ']';
    Production {
        lhs: 2,
        production: &[ParseType::T(18)],
    },
    // 63 - Bind: '=';
    Production {
        lhs: 9,
        production: &[ParseType::T(19)],
    },
    // 64 - Comma: ',';
    Production {
        lhs: 13,
        production: &[ParseType::T(20)],
    },
    // 65 - Continue: '\\';
    Production {
        lhs: 14,
        production: &[ParseType::T(21)],
    },
    // 66 - TextStart: ":";
    Production {
        lhs: 42,
        production: &[ParseType::T(22)],
    },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![ScannerConfig::new(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
        &[],
    )]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut Grammar<'t>,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        37,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.trim_parse_tree();

    // Initialize wrapper
    let mut user_actions = GrammarAuto::new(user_actions);
    llk_parser.parse(
        TokenStream::new(input, file_name, &SCANNERS, MAX_K).unwrap(),
        &mut user_actions,
    )
}
