// This module is generated by swon-parol-gen.
pub mod ast;
pub mod grammar;
#[allow(clippy::needless_lifetimes)]
pub mod grammar_trait;
pub mod nodes;
pub mod parser;
pub mod tree;

use nodes::{NonTerminalKind, TerminalKind};
pub use parol_runtime;
use tree::{ConcreteSyntaxTree, CstNodeData};

pub type Cst = ConcreteSyntaxTree<TerminalKind, NonTerminalKind>;
pub type CstNode = CstNodeData<TerminalKind, NonTerminalKind>;

pub use parol_runtime::parser::parse_tree_type::TreeConstruct;

#[test]
fn test_concrete_syntax_tree() {
    use nodes::{NonTerminalKind, TerminalKind};
    use tree::CstBuilder;

    let mut actions = grammar::Grammar::new();
    let input = r#"
    @ a.b.c
	d = 1 # comment
    e = "aaa"
	"#;

    let mut tree_builder = CstBuilder::<TerminalKind, NonTerminalKind>::new();
    parser::parse_into(input, &mut tree_builder, "test.swon", &mut actions).unwrap();
    let tree = tree_builder.build().unwrap();

    let mut out = String::new();
    tree.write(input, &mut out).unwrap();
    assert_eq!(out, input);
}

#[test]
fn test_concrete_syntax_tree_with_syntax_error() {
    use nodes::{NonTerminalKind, TerminalKind};
    use tree::CstBuilder;

    let mut actions = grammar::Grammar::new();

    let input = r#"
    @ a
    @ !!
    $variant"#;

    let mut tree_builder = CstBuilder::<TerminalKind, NonTerminalKind>::new();
    assert!(parser::parse_into(input, &mut tree_builder, "test.swon", &mut actions).is_err());
    let tree = tree_builder.build().unwrap();

    let mut out = String::new();
    tree.write(input, &mut out).unwrap();
    assert_eq!(
        out,
        r#"
    @ a
    @ !!
    $variant"#
    );
}
