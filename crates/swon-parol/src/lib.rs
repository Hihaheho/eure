// This module is generated by swon-parol-gen.
pub mod grammar;
#[allow(clippy::needless_lifetimes)]
pub mod grammar_trait;
pub mod nodes;
pub mod parser;
pub mod tree;

pub use parol_runtime;
pub use parol_runtime::syntree;

#[test]
fn test_parse() {
    use nodes::{NonTerminalKind, TerminalKind};
    use tree::CstBuilder;
    let mut actions = grammar::Grammar::new();
    let input = r#"
    @ a.b.c
	d = 1 # comment
    e = "aaa"
	"#;
    let tree_builder =
        CstBuilder::<TerminalKind, NonTerminalKind>::new();
    let tree = parser::parse_into(input, tree_builder, "test.swon", &mut actions).unwrap();
    
    assert!(tree.root.is_some());
    assert!(tree.graph.node_count() > 0);
}

#[test]
fn test_concrete_syntax_tree() {
    use nodes::{NonTerminalKind, TerminalKind};
    use tree::CstBuilder;
    
    let mut actions = grammar::Grammar::new();
    let input = r#"
    @ a.b.c
	d = 1 # comment
    e = "aaa"
	"#;
    
    let tree_builder = CstBuilder::<TerminalKind, NonTerminalKind>::new();
    let tree = parser::parse_into(input, tree_builder, "test.swon", &mut actions).unwrap();
    
    assert!(tree.root.is_some());
    
    assert!(tree.graph.node_count() > 0);
    
    if let Some(root) = tree.root {
        let children = tree.children(root);
        assert!(!children.is_empty());
    }
}

// use grammar_trait::*;

// trait Reconstruct {
//     fn reconstruct<W: std::fmt::Write>(&self, writer: &mut W) -> String;
// }

// impl Grammar<'_> {
//     pub fn reconstruct(&self) -> String {
//         let mut writer = String::new();
//         self.swon.reconstruct(&mut writer);
//         writer
//     }
// }

// impl<T> Reconstruct for Option<T>
// where
//     T: Reconstruct,
// {
//     fn reconstruct(&self) -> String {
//         match self {
//             Some(t) => t.reconstruct(),
//             None => String::default(),
//         }
//     }
// }

// impl<T> Reconstruct for Vec<T>
// where
//     T: Reconstruct,
// {
//     fn reconstruct(&self) -> String {
//         self.iter()
//             .map(|t| t.reconstruct())
//             .collect::<Vec<_>>()
//             .join("")
//     }
// }

// impl Reconstruct for Swon<'_> {
//     fn reconstruct(&self) -> String {
//         self.swon_list0
//             .iter()
//             .map(|section| section.section.reconstruct())
//     }
// }

// impl Reconstruct for Section<'_> {
//     fn reconstruct(&self) -> String {
//         todo!()
//     }
// }
